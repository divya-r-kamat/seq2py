Description,Code
Write a program to filter the numbers in a list which are divisible by a given number,"my_list = [11, 45, 74, 89, 132, 239, 721, 21]
num = 3
result = list(filter(lambda x: (x % num == 0), my_list))
print(f""Numbers divisible by {num} are {result}"")

"
Write a python function to remove all the even numbers from a list and return the remaining list,"def remove_even(my_list):
    result = list(filter(lambda x: (x % 2 != 0), my_list))
    return result

"
Write a function that takes two lists as input and returns a zipped list of corresponding elements,"def zip_list(list1, list2):
    return list(zip(list1, list2))

"
Write a functin that returns the LCM of two input numbers,"def lcm(a, b):
    if a>b:
        min_ = a
    else:
        min_ = b
    while True:
        if min_%a==0 and min_%b==0:
            break
        min_+=1
    return min_

"
Write a function that returns the sum of digits of a given number,"def digisum(num):
    sum_=0
    while num > 0:
        dig = num % 10
        sum_+=dig
        num//=10
    return sum_

"
Write a function to find the perimeter of a square,"def square_perimeter(a):
    return 4*a

"
Write a function to calculate and return the average of input numbers,"
def calc_avg(*args):
    if len(args) > 0:
        return sum(args)/len(args)
    return None

"
"Write a function to calculate simple interest, given p, r, t","
def simp_int(p, r, t):
    interest = (p*r*t)/100
    return interest

"
Write a function to check whether a number if perfect or not,"
def is_perfect(n):
    sum_ = 0
    for i in range(1, n//2 + 1):
        if n%i == 0:
            sum_+=i
    if sum_ == n:
        return True
    return False

"
Write a function that returns seperate lists of positive and negative numbers from an input list,"
def seperate_pn(l):
    pos_list = []
    neg_list = []
    for _ in l:
        if _<0:
            neg_list.append(_)
        else:
            pos_list.append(_)
    return pos_list, neg_list

"
"Write a function to find acceleration, given u, v and t","
def acc(u, v, t):
    return (v-u)/t

"
Write a lambda function to multiply two numbers,"
multiply = lambda a, b: a*b

"
Write a lambda function that gives True if the input number is even otherwise False,"
even = lambda a: True if a%2 == 0 else False

"
"Write a program to to check if a triangle is valid or not, given it's all three angles","
def is_valid_triangle_angle(a, b ,c):
    if a+b+c == 180:
        return True
    return False

"
"Write a program to to check if a triangle is valid or not, given it's all three sides' length","
def is_valid_triangle_length(a, b , c):
    if a>0 and b>0 and c>0:
        if a+b > c and a+c > b and b+c > a:
            return True
    return False

"
"Write a function that takes in height(m) and weight(kg), calculates BMI and prints the comments","
def bmi(height: ""Meters"", weight: ""Kgs""):
    bmi = weight/(height**2) 
    print(""Your BMI is: {0} and you are "".format(bmi), end='')
    if ( bmi < 16):
        print(""severely underweight."")
    elif ( bmi >= 16 and bmi < 18.5):
        print(""underweight."")
    elif ( bmi >= 18.5 and bmi < 25):
        print(""healthy."")
    elif ( bmi >= 25 and bmi < 30):
        print(""overweight."")
    elif ( bmi >=30):
        print(""severely overweight."") 

"
Write a lambda function to find the union of two lists,"
union = lambda a, b: list(set(a)|set(b))

"
write a program to display date and time,"
import datetime
now = datetime.datetime.now()
time= now.strftime(""%Y-%m-%d %H:%M:%S"")
print(f""Current date and time : {time}"")

"
write a program to return the absolute value,"
num = -10
print(f'Absolute of {num} is {abs(num)}')

"
write a Python program to merge two dictionaries,"
d1 = {'a': 100, 'b': 200}
d2 = {'x': 300, 'y': 200}
d = d1.copy()
d.update(d2)
print(f'merge two dictionaries:{d}')

"
write a Python program to Sum all the items in a dictionary,"
my_dict = {'data1':100,'data2':-54,'data3':247}
print(f'Sum all the items in a dictionary:{sum(my_dict.values())}')

"
write a python program to Get the maximum and minimum value in a dictionary,"
my_dict = {'x':500, 'y':5874, 'z': 560}
key_max = max(my_dict.keys(), key=(lambda k: my_dict[k]))
key_min = min(my_dict.keys(), key=(lambda k: my_dict[k]))
print('Maximum Value in a dictionary: ',my_dict[key_max])
print('Minimum Value in a dictionary: ',my_dict[key_min])

"
write a python program to make use of modulo operator,"
print(f'modulo 15 % 4: Sol->{15 % 4}')

"
write a python program to make use of regular expression for matching,"
s = 'foo123bar'
m = re.findall('123', s)
print('find the number position:',m)

"
write a python program to break when the num is perfectly divisible,"
i = 1
while True:
    if i%3 == 0:
        break
    print(i)
    i+= 1

"
write a python program to explain python zip method,"
l1=[2,4,6]
l2=[-2,-4,-6]
for i in zip(l1, l2):
    print(i)

"
write a list comprehension for number and its cube,"
l=[1, 2, 3, 4, 5, 6, 7, 8, 9]
print([x**3 for x in l])

"
write a python program to check identifier/keyword,"print('for'.isidentifier())

"
write a python program to check is an variable is printable,"print('1@ a'.isprintable())

"
write a python program to use f string,"var1 = 'python language'
print(f'f-string is an good feature in {var1}')

"
write a python program to explain the generator,"def f11(x):
    yield x+1
g=f11(8)
print(next(g))

"
write a python program to replace blank space to 1,"a = re.compile('[0-9]')
z= a.findall('3 trees')
print(z)

"
write a python program to calculate factorial sum using list comprehensive,"import functools 
n =5
print(functools.reduce(lambda x, y: x * y, range(1, n+1)))

"
write a python program to sort using list comprehensive,"pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
pairs.sort(key=lambda pair: pair[1])
print(pairs)

"
write a python program to del the first element of the array/list,"a = [-1, 1, 66.25, 333, 333, 1234.5]
del a[0]
print(a)

"
write a python program to replace the first character of a given word,"word = ""goal""
word = ""f"" + word[1:]
print(word)

"
write a python program to expalin the use of f-string,"n = 3
m = 4
print(f""{n} times {m} is {n*m}"")

"
write a python program to multiply three numbers,"num1 = 1.5
num2 = 6.3
num3 = -2.3
product = num1 * num2 * num3
print(f'Product: {product}')

"
write a python function to return the largest and smallest numbers in the given list and return None if the list is empty,"def largest_and_smallest(list_of_nums):
    if list_of_nums:
        return max(list_of_nums), min(list_of_nums)
    else:
        return

"
write a recursive python function that takes either a list or tuple as input and reverses the order of its elements,"def reverse(seq):
    SeqType = type(seq)
    emptySeq = SeqType()
    if seq == emptySeq:
        return emptySeq
    restrev = reverse(seq[1:])
    first = seq[0:1]
    result = restrev + first
    return result

"
write a python function that returns the square of a given input number,"def square(x):
    return x**2

"
write a python program that asks user to guess a number between 1 and 5 and guess it within 3 guesses,"print(""Please guess a number between 1 and 5 and I will guess within 3 chances!"")
guess1 = input(""Is it <= 3? enter y/n \n"")
if guess1 == ""y"":
    guess2 = input(""Is it <= 2? enter y/n \n"")
    if guess2 == ""y"":
        guess3 = input(""Is it 1? enter y/n \n"")
        if guess3 == ""y"":
            print(""Yay! found the number, its 1"")
        else:
            print(""Yay! found the number, its 2"")
    else:
        print(""Yay! found the number, its 3"")
else:
    guess2 = input(""Is it 4? enter y/n \n"")
    if guess2 == ""y"":
        print(""Yay! found the number, its 4"")
    else:
        print(""Yay! found the number, its 5"")

"
write a python program uses else with for loop,"seq = ""abcde""
for k in seq:
    if k == ""f"":
        break
else:
    print(""f Not Found!"")

"
Write a function to return the area of a right angle triangle,"def cal_rt_triangle_area(base:float,height:float)->float:
    if base and height:
        return (base*height)/2
    else:
        return None

"
Write a function to return the cartisian distance between two points,"def cal_cart_distance(x1:float,y1:float,x2:float,y2:float)->float:
    return ((x1-x2)**2+(y1-y2)**2)**(1/2)

"
Write a function to return the type roots of a quadratic equation ax**2 + bx + c = 0,"def root_type(a:float,b:float,c:float):
    if b**2-4*a*c >= 0:
        return 'real'
    else:
        return 'imaginary'

"
Write a function to return the area of a circle of raidus r,"def cal_area_circle(r):
    pi = 3.14
    return pi*r**2

"
Write a function to return the perimeter of a triangle,"def cal_perimeter_triangle(s1,s2,s3):
    return s1+s2+s3

"
Write a function to return the perimeter of an equilateral triangle,"def cal_perimeter_eq_triangle(a):
    return 3*a

"
Write a function to return the area of an ellipse,"def cal_area_ellipse(minor, major):
    pi = 3.14
    return pi*(minor*major)

"
Write a function to return the lateral surface area of a cylinder,"def cal_cylinder_lat_surf_area(height,radius):
    pi=3.14
    return 2*pi*radius*height

"
Write a function to return the total surface area of a cylinder,"def cal_cylinder_surf_area(height,radius):
    pi=3.14
    return 2*pi*radius**2*+2*pi*radius*height

"
Write a function to calculate the total capacitance of capacitors in parallel in a given list,"def cal_total_cap_in_parallel(cap_list:list)->float:
    return sum(cap_list)

"
Write a function to calculate the total resistance of resistances in parallel in a given list,"def cal_total_res_in_parallel(res_list:list)->float:
    return sum([1/r for r in res_list])

"
"Write a function to calculate the velocity of an object with initial velocity u, time t and acceleration a","def cal_final_velocity(initial_velocity:float,accelration:float,time:float)->float:
    return initial_velocity + accelration*time

"
ython code to merge dictionaries,"def merge1():
    test_list1 = [{""a"": 1, ""b"": 4}, {""c"": 10, ""d"": 15},{""f"": ""gfg""}]
    test_list2 = [{""e"": 6}, {""f"": 3, ""fg"": 10, ""h"": 1},{""i"": 10}]
    print(""The original list 1 is : "" + str(test_list1))
    print(""The original list 2 is : "" + str(test_list2))
    for idx in range(0, len(test_list1)):
        id_keys = list(test_list1[idx].keys())
        for key in test_list2[idx]:
            if key not in id_keys:
                test_list1[idx][key] = test_list2[idx][key]
    print(""The Merged Dictionary list : "" + str(test_list1))

"
Python program to find the  difference between two times,"def difference(h1, m1, h2, m2):
    t1 = h1 * 60 + m1
    t2 = h2 * 60 + m2
    if (t1 == t2):
        print(""Both are same times"")
        return
    else:
        diff = t2 - t1
    h = (int(diff / 60)) % 24
    m = diff % 60
    print(h, "":"", m)
difference(7, 20, 9, 45)
difference(15, 23, 18, 54)
difference(16, 20, 16, 20)

"
write a python function to count number of times a function is called,"def counter(fn):
    count = 0
    def inner(*args, **kwargs):
        nonlocal count
        count += 1
        print(f'Function {fn.__name__} was called {count} times.')
        return fn(*args, **kwargs)
    return inner

"
write a python decorator function to find how much time user given function takes to execute,"def timed(fn):
    from time import perf_counter
    from functools import wraps
    @wraps(fn) 
    def inner(*args, **kwargs):
        start = perf_counter()
        result = fn(*args, **kwargs)
        end = perf_counter()
        elapsed = end - start
        args_ = [str(a) for a in args]
        kwargs_ = ['{0}={1}'.format(k, v) for k, v in kwargs.items()]
        all_args = args_ + kwargs_
        args_str = ','.join(all_args) # now it is comma delimited
        print(f'{fn.__name__}({args_str}) took {elapsed} seconds')
        return result
    # inner = wraps(fn)(inner)
    return inner

"
write a python function to convert list of strings to list of integers,"def stringlist_to_intlist(sList): 
    return(list(map(int, sList)))

"
write a python generator function for generating Fibonacci Numbers,"def fib(limit): 
    a, b = 0, 1  
    while a < limit: 
        yield a 
        a, b = b, a + b

"
rite a function to get list of profanity words from Google profanity URL,"def profanitytextfile():
    url = ""https://github.com/RobertJGabriel/Google-profanity-words/blob/master/list.txt""
    html = urlopen(url).read()
    soup = BeautifulSoup(html, features=""html.parser"")
    textlist = []
    table = soup.find('table')
    trs = table.find_all('tr')
    for tr in trs:
        tds = tr.find_all('td')
        for td in tds:
            textlist.append(td.text)
    return textlist

"
write a python function to return the sequence elements n times,"def ncycles(iterable, n):
    from itertools import chain, repeat
    return chain.from_iterable(repeat(tuple(iterable), n))

"
write a python function to flatten one level of nesting,"def flatten(list_of_lists):
    from itertools import chain
    return chain.from_iterable(list_of_lists)

"
write a python function to collect data into fixed-length chunks or blocks,"def grouper(iterable, n, fillvalue=None):
    from itertools import zip_longest
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)

"
"write a python function to return random selection from itertools.permutations(iterable, r)","def random_permutation(iterable, r=None):
    import random
    pool = tuple(iterable)
    r = len(pool) if r is None else r
    return tuple(random.sample(pool, r))

"
"write a python function to random select from itertools.combinations(iterable, r)","def random_combination(iterable, r):
    import random
    pool = tuple(iterable)
    n = len(pool)
    indices = sorted(random.sample(range(n), r))
    return tuple(pool[i] for i in indices)

"
write a python function to locate the rightmost value less than x,"def find_lt(a, x):
    from bisect import bisect_left  
    i = bisect_left(a, x)
    if i:
        return a[i-1]
    raise ValueError

"
Write a function that strips every vowel from a string provided,"def strip_vowels(input_str:str)->str:
    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' ]
    return ''.join(list(filter(lambda x: x not in vowels, input_str)))

"
Write a function that returns length of the list,"
def list_length(l):
    return len(l)

"
Write a function to print a string by repeating it n times,"
def print_repeatnstring(text:str, n:int)-> str:
    return text*n

"
Write a function to merge two lists element wise,"def merge_lists(l1:list, l2:list):
    return list(zip(l1,l2))

"
Write a function to multiplies two lists element wise only if numbers are odd,"def adds_listoddelements(l1:list, l2:list):
    return [i*j for i, j in zip(l1,l2) if i*j%2 == 1]

"
Write a function that returns list of elements with n power to elements of list,"def n_power(l1:list, power:int)->list:
    return [i**power for i in l1]

"
Write a function that returns log of a function,"def log(x:float)->float:
    import math
    return math.log(x)

"
Write a function that returns a dictionary sorted descending by its values,"def descending_dict_valuesort(d:dict):
    return {key: val for key, val in sorted(d.items(), reverse=True, key = lambda ele: ele[1])}

"
Write a function that returns a replace values in string with values provided,"def replace_values(s:str, old, new)->str:
    s.replace(old, new)

"
write a  program to remove empty tuples from a list of tuples,"def Remove(tuples): 
    tuples = filter(None, tuples) 
    return tuples 

"
write a program to check whether a given key already exists in a dictionary.,"
def checkKey(dict, key): 
    if key in dict.keys(): 
        print(""Present, "", end ="" "") 
        print(""value ="", dict[key]) 
    else: 
        print(""Not present"") 
dict = {'a': 100, 'b':200, 'c':300} 
key = 'b'
checkKey(dict, key) 

"
write a program to find the least Frequent Character in String,"test_str = ""helloworld""
print (""The original string is : "" + test_str) 
all_freq = {} 
for i in test_str: 
    if i in all_freq: 
        all_freq[i] += 1
    else: 
        all_freq[i] = 1
res = min(all_freq, key = all_freq.get)  
print (""The minimum of all characters in the given word is : "" + str(res)) 

"
write a program to find the factorial of a number,"
num = int(input(""Enter a number: ""))  
factorial = 1  
if num < 0:  
    print(""Sorry, factorial does not exist for negative numbers"")  
elif num == 0:  
    print(""The factorial of 0 is 1"")  
else:  
    for i in range(1,num + 1):  
        factorial = factorial*i  
    print(""The factorial of"",num,""is"",factorial) 

"
write a program to display the multiplication table of a number,"
num = int(input(""Show the multiplication table of? ""))  
for i in range(1,11):  
    print(num,'x',i,'=',num*i)  

"
write a program to print the elements of an array present on even position,"arr = [1, 2, 3, 4, 5];     
print(""Elements of given array present on even position: "");    
for i in range(1, len(arr), 2):    
    print(arr[i]);   

"
write a program to find compound interest,"p = float(input(""Enter the principle amount : ""))
r = float(input(""Enter the rate of interest : ""))
t = float(input(""Enter the time in the years: ""))
ci =  p * (pow((1 + r / 100), t)) 
print(""Principle amount  : "", p)
print(""Interest rate     : "", r)
print(""Time in years     : "", t)
print(""compound Interest : "", ci)

"
write a program to find the power of a number,"a = 10
b = 3
result = a**b
print (a, "" to the power of "", b, "" is = "", result)

"
write a program to find winner of the day,"def find_winner_of_the_day(*match_tuple):
    team1_count = 0
    team2_count = 0
    for team_name in match_tuple :
        if team_name == ""Team1"" :
            team1_count += 1
        else :
            team2_count += 1
    if team1_count == team2_count :
        return ""Tie""
    elif team1_count > team2_count :
        return ""Team1""
    else :
        return ""Team2""
if __name__ == ""__main__"" :
    print(find_winner_of_the_day(""Team1"",""Team2"",""Team1""))
    print(find_winner_of_the_day(""Team1"",""Team2"",""Team1"",""Team2""))
    print(find_winner_of_the_day(""Team1"",""Team2"",""Team2"",""Team1"",""Team2""))

"
write a program to print the version information,"import sys
print(""Python version: "", sys.version)
print(""Python version info: "", sys.version_info)

"
write a program to reverse a string that contains digits in Python,"
def reverse(n):
    s=str(n) 
    p=s[::-1]
    return p 
num = int(input('Enter a positive value: '))
print('The reverse integer:',reverse(num))

"
Write a python program to Implement Bubble sort and print the sorted list for the below list,"
def bubble_sort(alist):
    for i in range(len(alist) - 1, 0, -1):
        no_swap = True
        for j in range(0, i):
            if alist[j + 1] < alist[j]:
                alist[j], alist[j + 1] = alist[j + 1], alist[j]
                no_swap = False
        if no_swap:
            return
alist = [2, 3, 5, 6, 4, 5]
bubble_sort(alist)
print('Sorted list: ', end='')
print(alist)

"
Write a python program to Implement Selection sort and print the sorted list for the below list,"
def selection_sort(alist):
    for i in range(0, len(alist) - 1):
        smallest = i
        for j in range(i + 1, len(alist)):
            if alist[j] < alist[smallest]:
                smallest = j
        alist[i], alist[smallest] = alist[smallest], alist[i]
alist = [2, 3, 5, 6, 4, 5]
selection_sort(alist)
print('Sorted list: ', end='')
print(alist)

"
Write a python program to Implement Insertion sort and print the sorted list for the below list,"
def insertion_sort(alist):
    for i in range(1, len(alist)):
        temp = alist[i]
        j = i - 1
        while (j >= 0 and temp < alist[j]):
            alist[j + 1] = alist[j]
            j = j - 1
        alist[j + 1] = temp
alist = [2, 3, 5, 6, 4, 5]
insertion_sort(alist)
print('Sorted list: ', end='')
print(alist)

"
Write a python program to Implement Merge sort and print the sorted list for the below list,"
def merge_sort(alist, start, end):
    if end - start > 1:
        mid = (start + end)//2
        merge_sort(alist, start, mid)
        merge_sort(alist, mid, end)
        merge_list(alist, start, mid, end)
def merge_list(alist, start, mid, end):
    left = alist[start:mid]
    right = alist[mid:end]
    k = start
    i = 0
    j = 0
    while (start + i < mid and mid + j < end):
        if (left[i] <= right[j]):
            alist[k] = left[i]
            i = i + 1
        else:
            alist[k] = right[j]
            j = j + 1
        k = k + 1
    if start + i < mid:
        while k < end:
            alist[k] = left[i]
            i = i + 1
            k = k + 1
    else:
        while k < end:
            alist[k] = right[j]
            j = j + 1
            k = k + 1
alist = [2, 3, 5, 6, 4, 5]
merge_sort(alist, 0, len(alist))
print('Sorted list: ', end='')
print(alist)

"
Write a python program to Implement Heapsort and print the sorted list for the below list,"
def heapsort(alist):
    build_max_heap(alist)
    for i in range(len(alist) - 1, 0, -1):
        alist[0], alist[i] = alist[i], alist[0]
        max_heapify(alist, index=0, size=i)
def parent(i):
    return (i - 1)//2
def left(i):
    return 2*i + 1
def right(i):
    return 2*i + 2
def build_max_heap(alist):
    length = len(alist)
    start = parent(length - 1)
    while start >= 0:
        max_heapify(alist, index=start, size=length)
        start = start - 1
def max_heapify(alist, index, size):
    l = left(index)
    r = right(index)
    if (l < size and alist[l] > alist[index]):
        largest = l
    else:
        largest = index
    if (r < size and alist[r] > alist[largest]):
        largest = r
    if (largest != index):
        alist[largest], alist[index] = alist[index], alist[largest]
        max_heapify(alist, largest, size)
alist = [2, 3, 5, 6, 4, 5]
heapsort(alist)
print('Sorted list: ', end='')
print(alist)

"
Write a python program to Implement Counting sort and print the sorted list for the below list,"
def counting_sort(alist, largest):
    c = [0]*(largest + 1)
    for i in range(len(alist)):
        c[alist[i]] = c[alist[i]] + 1
    c[0] = c[0] - 1 
    for i in range(1, largest + 1):
        c[i] = c[i] + c[i - 1]
    result = [None]*len(alist)
    for x in reversed(alist):
        result[c[x]] = x
        c[x] = c[x] - 1
    return result
alist = [2, 3, 5, 6, 4, 5]
k = max(alist)
sorted_list = counting_sort(alist, k)
print('Sorted list: ', end='')
print(sorted_list)

"
Write a python program to Implement Shell sort and print the sorted list for the below list,"
def gaps(size):
    length = size.bit_length()
    for k in range(length - 1, 0, -1):
        yield 2**k - 1
def shell_sort(alist):
    def insertion_sort_with_gap(gap):
        for i in range(gap, len(alist)):
            temp = alist[i]
            j = i - gap
            while (j >= 0 and temp < alist[j]):
                alist[j + gap] = alist[j]
                j = j - gap
            alist[j + gap] = temp
    for g in gaps(len(alist)):
        insertion_sort_with_gap(g)
alist = [2, 3, 5, 6, 4, 5]
shell_sort(alist)
print('Sorted list: ', end='')
print(alist)

"
Write a python function to Copy the Contents of One File into Another,"
def copy(from_file, to_file):
    with open(from_file) as f:
        with open(to_file, ""w"") as f1:
            for line in f:
                f1.write(line)

"
Write a python function that Print all the Numbers Present in the Text File,"
def print_number(fname):
    with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            for i in words:
                for letter in i:
                    if(letter.isdigit()):
                        print(letter)

"
Write a python function that Capitalize the First Letter of Every Word in the File,"
def capitalize(fname):
    with open(fname, 'r') as f:
        for line in f:
            l=line.title()
            print(l)

"
Write a python Program to Flatten and print a List,"
a=[[1,[[2]],[[[3]]]],[[4],5]]
flatten=lambda l: sum(map(flatten,l),[]) if isinstance(l,list) else [l]
print(flatten(a))

"
Write a Python function to Find the Power of a Number Using Recursion,"
def power(base,exp):
    if(exp==1):
        return(base)
    if(exp!=1):
        return(base*power(base,exp-1))

"
Write a Python Program that Prints which Letters are in the First String but not in the Second,"
s1='python'
s2='schoolofai'
a=list(set(s1)-set(s2))
print(""The letters are:"")
for i in a:
    print(i)

"
Write a Python Program to Multiply All the Items in a Dictionary,"
def mul_dict(d):
    tot=1
    for i in d:    
        tot=tot*d[i]
    return tot

"
Write a Python Program to Remove the nth Index Character from a Non-Empty String,"
def remove(string, n):  
    first = string[:n]   
    last = string[n+1:]  
    return first + last

"
Write a Python Program to Count and print Number of Lowercase Characters in a String,"
string='This is an Assignment'
count=0
for i in string:
    if(i.islower()):
        count=count+1
print(""The number of lowercase characters is:"")
print(count)

"
Write a Python Program to Find the Second Largest Number in a List Using Bubble Sort,"
a=[2, 3, 8, 9, 2, 4, 6]
for i in range(0,len(a)):
    for j in range(0,len(a)-i-1):
        if(a[j]>a[j+1]):
            temp=a[j]
            a[j]=a[j+1]
            a[j+1]=temp 

"
Write a Python Program to Create a List of Tuples with the First Element as the Number and Second Element as the Square of the Number using list comprehension,"
l_range=2
u_range=5
a=[(x,x**2) for x in range(l_range,u_range+1)]

"
Write a Python Program to print all Numbers in a Range which are Perfect Squares and Sum of all Digits in the Number is Less than 10,"
l=6
u=9
a=[x for x in range(l,u+1) if (int(x**0.5))**2==x and sum(list(map(int,str(x))))<10]
print(a)

"
Write a Python Program to Swap the First and Last Value of a List,"
a=[2, 3, 8, 9, 2, 4, 6]
n = len(a)
temp=a[0]
a[0]=a[n-1]
a[n-1]=temp
print(""New list is:"")
print(a)

"
Write a Python function to Check Whether a Given Year is a Leap Year,"
def leapyear_check(year):
    if(year%4==0 and year%100!=0 or year%400==0):
        return True
    else:
        return False

"
Write a Python Program to Convert Gray Code to Binary,"
def gray_to_binary(n):
    n = int(n, 2)
    mask = n
    while mask != 0:
        mask >>= 1
        n ^= mask
    return bin(n)[2:]

"
Write a Python Program to Convert Binary to Gray Code,"
def binary_to_gray(n):
    n = int(n, 2)
    n ^= (n >> 1)
    return bin(n)[2:]

"
Write a Python Program to print the Reverse a Given Number,"
n=1023
rev=0
while(n>0):
    dig=n%10
    rev=rev*10+dig
    n=n//10
print(""Reverse of the number:"",rev)

"
Write a Python function to Print an Identity Matrix,"
def print_identity_matrix(n):
    for i in range(0,n):
        for j in range(0,n):
            if(i==j):
                print(""1"",sep="" "",end="" "")
            else:
                print(""0"",sep="" "",end="" "")
        print()

"
Write a Python Program to print a list of fibonacci series for a given no using closer,"
def fib():
    cache = {1:1, 2:1}
    def calc_fib(n):
        if n not in cache:
            print(f'Calculating fib({n})')
            cache[n] = calc_fib(n - 1) + calc_fib(n - 2)
        return cache[n]
    return calc_fib

"
Write a Python function to calculate factorial of a given no using closer,"
def fact():
    cache = {0:1, 1:1}
    def calc_fib(n):
        if n not in cache:
            print(f'Calculating fact({n})')
            cache[n] = calc_fib(n - 1) * n
        return cache[n]
    return calc_fib

"
Write a Python function that shifts the character of strings,"
def char_shift(string, shift_count):
    return """".join([chr(ord(x)+shift_count) if (ord(x)+shift_count) <= 122 else chr(96 + (ord(x)+shift_count) - 122) for x in string])

"
write a function to check given string is palindrome or not ( case insensitive ),"def palindrome_str_check(value: str):
    if isinstance(value, str) :
        print( value.lower() == value[::-1].lower() )
    else:
        raise ValueError('Invalid Input')

"
write a function to print the count of divisor.,"def divisor_count(num: int):
    if isinstance(num, int):
        count = 0
        for i in range(1, num+1):
            if num%i == 0:
                count = count+1
        print(f'Number of divisor is {count}')
    else:
        raise ValueError('Invalid Input')

"
function to print the multiplication table,"def maths_tables( no_ : int):
    for i in range(1, 11):
        print(f'{no_}x{i}={no_*i}')

"
function to print ascii value of a character.,"def show_ascii(a: str):
    print(ord(a))

"
function to print marsh code equivalent from string.,"def encode_marsh(sen : str):
    char_to_dots = { 'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',
                      'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',
                      'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',
                      'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
                      'Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----',
                      '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....',
                      '6': '-....', '7': '--...', '8': '---..', '9': '----.',
                      '&': '.-...', ""'"": '.----.', '@': '.--.-.', ')': '-.--.-', '(': '-.--.',
                      ':': '---...', ',': '--..--', '=': '-...-', '!': '-.-.--', '.': '.-.-.-',
                      '-': '-....-', '+': '.-.-.', '""': '.-..-.', '?': '..--..', '/': '-..-.'
                    }
    for i in sen:
        print(char_to_dots[i.upper()])

"
function to check two number ( floating also )  are close or not,"def check_isclose(x, y):
    from math import isclose
    return isclose(x, y)

"
function to create a dictionary of mirror of letter.,"def letter_mirror():
    import string
    letter = string.ascii_lowercase
    rvr_letter = letter[::-1]
    dict_char = dict(zip(letter, rvr_letter))
    return dict_char

"
function to get the current time at GMT,"def current_time():
    import datetime
    print(datetime.datetime.now())

"
first class function,"def call_func(x, func):
    return fn(x)

"
str to list,"def str_to_list(sen):
    return list(sen)

"
string to tuple,"def sen_to_tuple(sen):
    return tuple(sen)

"
function to any implementation,"def any_imp(a):
    return any(a)

"
function to show boolean true / false is a number,"def bool_show(a=5):
    return True*a

"
implementation of local cooncept,"def inner_show():
    x = 'Hola'
    def inner():
        nonlocal x
        x = 'Hola World'
        print(f'Inner function x is {x}')
    inner()
    print(f'outer function x is {x}')

"
custom logging along with counter,"def custom_counter_log():
    x = 0
    dt = datetime.now()
    def inner():
        nonlocal x
        x += 1
        print(f' Switch or button is called {x} at {dt}')
    return inner

"
class to show as how to make the class as callable,"class CallShow:
    def __init__(self, msg = 'Demo class to show how to make class object as callable'):
        self.msg = msg
    def __call__(self):
        return f""Code to be writen here above to act as per accling object of call""

"
return dot product of two vectors,"def dot_product(a: ""Vector1"", b: ""Vector2""):
    return sum( e[0]*e[1] for e in zip(a,b) )

"
class to show implementation of static method,"class Mathematics:
    def __init__(self, msg=""Demo class of Mathematics""):
        self.msg = msg
    def __str__(self):
        return f' String representation of an object'
    def __repr__(self):
        return f' repr representation of an object with parameter {self.msg}'
    @staticmethod
    def addition(a: ""Variable1"", b: 'Variable2'):
        return a+b

"
class to show implementation of custom sequence of list,"class CustomList:
    def __init__(self):
        self.list_ = [1,2,3,4]
    def __len__(self):
        return len(self.list_)
    def __getitem__(self, i):
        if isinstance(i, int):
            if i<0:
                i = len(self.list_) + i
            if i<0 or i>=len(self.list_):
                raise IndexError('Invalid Input')
            else:
                return self.list_[i]

"
show generator is faster than list,"def show_gen_fast():
    from timeit import timeit
    dt = timeit(""[num for num in fib(100) ]"", globals = globals(), number=1)
    return dt

"
This is how pass works in case of multiple inheritance,"class A1(object):
    def foo(self):
        print(""class A1"")
class B1(A1):
    pass
class C1(A1):
    def foo(self):
        print(""class C1"")
class D1(B1,C1):
    pass

"
List are mutable,"a_list = []
print('ID:', id(a_list))
a_list += [1]
print('ID (+=):', id(a_list))
a_list = a_list + [2]
print('ID (list = list + ...):', id(a_list))

"
All blank lists are not the same,"a_list = []
print(a_list, '\nID (initial):',id(a_list), '\n')
a_list.append(1)
print(a_list, '\nID (append):',id(a_list), '\n')
a_list.extend([2])
print(a_list, '\nID (extend):',id(a_list))

"
ogical or logical and,"result = (2 or 3) * (5 and 7)
print('2 * 7 =', result)

"
Usage of global keyword,"x = 0
def in_func2():
    global x
    x = 1
    print('in_func2:', x)
in_func2()
print('global:', x)

"
local vs. enclosed,"def outer():
    x = 1
    print('outer before:', x)
    def inner():
        x = 2
        print(""inner:"", x)
    inner()
    print(""outer after:"", x)
outer()

"
Add tuples like numerics,"my_tup = (1,)
my_tup += (4,)
my_tup = my_tup + (5,)
print(my_tup)

"
Create a list comprehension,"def listcompr(n=100000):
    my_list = [i for i in range(n) if i % 5 == 0]
    return my_list

"
Public vs. private class methods and name mangling,"def public_method(self):
    print('Hello public world!')
def __private_method(self):
    print('Hello private world!')
def call_private_method_in_class(self):
    self.__private_method()
my_instance = my_class()
my_instance.public_method()
my_instance._my_class__private_method()
my_instance.call_private_method_in_class()

"
"List slicing using indexes that are ""out of range""","my_list = [1, 2, 3, 4, 5]
print(my_list[5])

"
No problem to use the same variable name in the local scope without affecting the local counterpart:,"def my_func():
    var = 'locally changed'
var = 'global'
my_func()
print(var)

"
We have to use the global keyword!,"def my_func():
    global var
    print(var)  # want to access global variable
    var = 'locally changed'  # changes the gobal variable
var = 'global'
my_func()
print(var)

"
Creating copies of mutable objects,"my_list1 = [[1, 2, 3]] * 2
print('initially ---> ', my_list1)
my_list1[1][0] = 'a'
print(""after my_list1[1][0] = 'a' ---> "", my_list1)
my_list2 = [[1, 2, 3] for i in range(2)]
print('initially:  ---> ', my_list2)
my_list2[1][0] = 'a'
print(""after my_list2[1][0] = 'a':  ---> "", my_list2)
for a, b in zip(my_list1, my_list2):
    print('id my_list1: {}, id my_list2: {}'.format(id(a), id(b)))

"
Only the first clause of generators is evaluated immediately,"gen_fails = (i for i in 1/0)

"
example to demonstrate usage of docstring,"def greet(name):
    """"""
    This function greets to
    the person passed in as
    a parameter
    """"""
    print(""Hello, "" + name + "". Good morning!"")

"
Absolute function,"def absolute_value(num):
    if num >= 0:
        return num
    else:
        return -num
print(absolute_value(2))
print(absolute_value(-4))

"
accept user input,"str = input(""Enter your input: "")
print (""Received input is : "", str)

"
write a python program to add numbers from two list if first list item is even and second list item is odd.,"def add_two_lists_even_odd(l1, l2):
    new = []
    for x, y in zip(l1, l2):
        if l1%2 == 0 and l2%2 != 0:
            new.append(x+y)
    return new

"
write a python program Convert KM/H to MPH,"kmh = 50
mph =  0.6214 * kmh
print(""Speed:"", kmh, ""KM/H = "", mph, ""MPH"")

"
write a python function to find the URL from an input string using the regular expression,"def Find(string): 
    import re 
    regex = r""(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\"".,<>?Â«Â»â€œâ€â€˜â€™]))""
    url = re.findall(regex,string)       
    return [x[0] for x in url] 

"
write a python program to merge 2 dictionaries,"x = {'a' : 1, 'b' : 2, 'c' : 3}
y = {'x' : 10, 'y' : 20, 'z' : 30 }
z = {**x , **y}

"
write a python code to implement Sigmoid function,"import math
def sigmoid(x):
    return 1 / (1 + math.exp(-x))

"
write a python program which will find all such numbers which are divisible by 7 but are not a multiple of 5 ;between 2000 and 3200 (both included),"l=[]
for i in range(2000, 3201):
    if (i%7==0) and (i%5!=0):
        l.append(str(i))
print(','.join(l))

"
write a python program to Remove Punctuations From a String,"punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
my_str = ""Hello!!!, he said ---and went.""
no_punct = """"
for char in my_str:
    if char not in punctuations:
        no_punct = no_punct + char
print(no_punct)

"
write a python function to Find Hash of File,"import hashlib
def hash_file(filename):
    h = hashlib.sha1()
    with open(filename,'rb') as file:
        chunk = 0
        while chunk != b'':
            chunk = file.read(1024)
            h.update(chunk)
    return h.hexdigest()

"
write a python program to Convert Celsius To Fahrenheit,"celsius = 37.5
fahrenheit = (celsius * 1.8) + 32
print(f'{celsius} degree Celsius is equal to {fahrenheit} degree Fahrenheit')

"
wrtie a python function to solve Tower Of Hanoi and print necessary statements,"def TowerOfHanoi(n , source, destination, auxiliary): 
    if n==1: 
        print(""Move disk 1 from source"",source,""to destination"",destination) 
        return
    TowerOfHanoi(n-1, source, auxiliary, destination) 
    print(""Move disk"",n,""from source"",source,""to destination"",destination) 
    TowerOfHanoi(n-1, auxiliary, destination, source) 

"
write a python function to find the number of times every day occurs in a Year and print them," def day_occur_time(year):
    import datetime  
    import calendar
    days = [ ""Monday"", ""Tuesday"", ""Wednesday"",   
           ""Thursday"",  ""Friday"", ""Saturday"",  
           ""Sunday"" ] 
    L = [52 for i in range(7)] 
    pos = -1
    day = datetime.datetime(year, month = 1, day = 1).strftime(""%A"") 
    for i in range(7): 
        if day == days[i]: 
            pos = i 
    if calendar.isleap(year): 
        L[pos] += 1
        L[(pos+1)%7] += 1       
    else: 
        L[pos] += 1
    for i in range(7): 
        print(days[i], L[i])

"
write a python program for basic HTML parser,"from html.parser import HTMLParser

class MyHTMLParser(HTMLParser):
    def handle_starttag(self, tag, attrs):
        print(tag)
        for attr in attrs:
            print(""->"", attr[0], "">"", attr[1])
parser = MyHTMLParser()
for i in range(int(input())):
    parser.feed(input())

"
"rite a function to compress a given string. Suppose a character 'c' occurs consecutively X times in the string. Replace these consecutive occurrences of the character 'c' with  (X, c) in the string.","def compress(text):
    from itertools import groupby
    for k, g in groupby(text):
        print(""({}, {})"".format(len(list(g)), k), end="" "")

"
Write a python function to count the number of Words in a Text File,"def check_words():
    fname = input(""file name: "")
    num_words = 0
    with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            num_words += len(words)
    print(""Number of words = "", num_words)

"
write a python function to strip punctuations from a given string,"def strip_punctuations(s):
    return s.translate(str.maketrans('', '', string.punctuation))

"
write a python function for dice roll asking user for input to continue and randomly give an output.,"def dice():
    import random
    min = 1
    max = 6
    roll_again = 'y'
    while roll_again == ""yes"" or roll_again == ""y"":
        print(""Rolling the dice..."")
        print(random.randint(min, max))
        roll_again = input(""Roll the dices again?"")

"
"write a python program to Encrypt and Decrypt features within 'Secure' class with key generation, using cryptography module","
from cryptography.fernet import Fernet
class Secure:
    def __init__(self):
        key = Fernet.generate_key()
        with open(""secret.key"", ""wb"") as key_file:
            key_file.write(key)
    @staticmethod
    def load_key():
        return open(""secret.key"", ""rb"").read()
    def encrypt_message(self, message):
        key = self.load_key()
        encoded_message = message.encode()
        f = Fernet(key)
        encrypted_message = f.encrypt(encoded_message)
        print(""\nMessage has been encrypted: "", encrypted_message)
        return encrypted_message
    def decrypt_message(self, encrypted_message):
        key = self.load_key()
        f = Fernet(key)
        decrypted_message = f.decrypt(encrypted_message)
        print(""\nDecrypted message:"", decrypted_message.decode())
s = Secure()
encrypted = s.encrypt_message(""My deepest secret!"")
s.decrypt_message(encrypted)

"
write a python function to generate cryptographically strong pseudo-random data,"def get_cryptographically_secure_data(n=101):
    import secrets
    return secrets.token_bytes(n), secrets.token_hex(n)

"
write a python function to convert byte to UTF-8,"def byte_to_utf8(data):
    return data.decode(""utf-8"")
print(byte_to_utf8(data=b'r\xc3\xa9sum\xc3\xa9'))

"
write a python program to input a string from user and convert input string into all upper case and print the result,"string = input(""Please Enter your Own String : "")
string1 = string.upper()
print(""\nOriginal String in Lowercase  =  "", string)
print(""The Given String in Uppercase =  "", string1)

"
write a python program to input a Number N from user and print Even Numbers from 1 to N,"
maximum = int(input("" Please Enter the Maximum Value : ""))
for number in range(1, maximum+1):
    if(number % 2 == 0):
        print(""{0}"".format(number))

"
write a python program that takes two integers as input and check if the first number is divisible by other,"
num1 = int(input(""Enter first number :""))
num2 = int(input(""Enter second number :""))
remainder  = num1 % num2
if remainder == 0:
    print(num1 ,"" is divisible by "",num2)
else :
    print(num1 ,"" is not divisible by "",num2)

"
write a python program to find the average of list of numbers provided as input by user,"n=int(input(""Enter the number of elements to be inserted: ""))
a=[]
for i in range(0,n):
    elem=int(input(""Enter element: ""))
    a.append(elem)
avg=sum(a)/n
print(""Average of elements in the list"",round(avg,2))

"
write a python program which takes input a string and print reverse string,"name = input(""Enter String"")
print(name[::-1]) 

"
write a python function that takes input radius and return area of circle,"def findArea(r): 
    PI = 3.142
    return PI * (r*r);

"
write a python program to print the ascii value of input character,"character = input("" Enter Character :"")
print(f""Ascii value of character {character} is : "" , ord(character))

"
write a python program to concatenate two dictionaries,"
d1 = {'a' : 1 ,'b' : 2}
d2 = {'c' : 1 ,'d' : 2}
d3 = {**d1,**d2}
print(d3)

"
write a python program which takes input a list and prints the mean of elements within the list,"s1 = eval(input(""Enter list ""))
mean = sum(s1) / len(s1) 
print(""Mean of sample is : "" + str(mean)) 

"
write a python function that takes input a string and removes duplicates from the same,"foo = input(""Enter String : "")
print(""Duplicates Removed"","""".join(set(foo)))

"
"Write a Python program to add 'ing' at the end of a given string (length should be at least 3). If the given string already ends with 'ing' then add 'ly' instead. If the string length of the given string is less than 3, leave it unchanged.","def add_string(str1):
    length = len(str1)
    if length > 2:
        if str1[-3:] == 'ing':
            str1 += 'ly'
        else:
            str1 += 'ing'
    return str1

"
Write a Python program to count the number of even and odd numbers from a series of numbers.,"numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9) # Declaring the tuple
count_odd = 0
count_even = 0
for x in numbers:
    if not x % 2:
        count_even+=1
    else:
        count_odd+=1

"
write a python function that takes input a list of string and print the largest string,"def find_longest_word(words_list):
    word_len = []
    for n in words_list:
        word_len.append((len(n), n))
    word_len.sort()
    return word_len[-1][0], word_len[-1][1]

"
write a python program that print today's date,"from datetime import date
print(date.today()) 

"
write a python program that takes input number of lines and finds the possible number of intersection,"def countMaxIntersect(n): 
    return int(n*(n - 1)/2) 

"
write a program to find and print the largest among three number,"snum1 = 10
num2 = 12
num3 = 14 
if (num1 >= num2) and (num1 >= num3): 
    largest = num1
elif (num2 >= num1) and (num2 >= num3):   
    largest = num2
else:   largest = num3
print(f'largest:{largest}')

"
write a python function to subtract two user provided numbers and return the result,"def sub_two_numbers(num1, num2):
    sub = num1 - num2
    return sub

"
write a python program to pop element form dictionary,"squares = {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}
print(squares.pop(4))

"
rite a python program that prints the length of tuple,"thistuple = (""apple"", ""banana"", ""cherry"")
print(len(thistuple))

"
add a value to the start of a list python,"var=7
array = [1,2,3,4,5,6]
array.insert(0,var)

"
python print last element of list,"mylist = [0, 1, 2]
print(myList[-1]) 

"
how to break out of nested loops python,"x_loop_must_break = False
for x in [1, 2, 3]:
    print(f""x is {x}"")
    for y in [1, 2, 3]:
        print(f""y is {y}"")
        if y == 2:
            x_loop_must_break = True
            break
    if x_loop_must_break: break

"
write a function to generate and print a random number between 0 and 22,"import random
n = random.randint(0,22)
print(n)

"
write a python function to flatten nested lists,"from collections import Iterable
def flatten(lis):
    for item in lis:
        if isinstance(item, Iterable) and not isinstance(item, str):
            for x in flatten(item):
                yield x
        else:
            yield item

"
how to open xml file element tree,"import xml.etree.ElementTree as ET
tree = ET.parse('filename.xml') 
tree_root = tree.getroot() 

"
how to remove integer from string in python,"s = '12abcd405'
result = ''.join([i for i in s if not i.isdigit()])

"
write a function to return the nth fibonacci in python,"def Fibonacci(n): 
    if n<0: 
        print(""Incorrect input"")
    elif n==1: 
        return 0
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 

"
write a python function to find the median on an array of numbers,"def median(arr):
    if len(arr) == 1:
        return arr[0]
    else:
        arr = sorted(arr)
        a = arr[0:round(len(arr)/2)]
        b = arr[len(a):len(arr)]
        if len(arr)%2 == 0:
            return (a[len(a)-1]+b[0])/2
        else:
            return a[len(a)-1]

"
Write a Python function to check if a number is a perfect square,"def is_perfect_square(n):
    x = n // 2
    y = set([x])
    while x * x != n:
        x = (x + (n // x)) // 2
        if x in y: return False
        y.add(x)
    return True

"
Write a Python function to push all zeros to the end of a list.,"def move_zero(num_list):
    a = [0 for i in range(num_list.count(0))]
    x = [ i for i in num_list if i != 0]
    x.extend(a)
    return(x)

"
Write a Python program to compute the sum of all the multiples of 3 or 5 below 500.,"n = 0
for i in range(1,500):
    if not i % 5 or not i % 3:
        n = n + i
print(n)

"
write a Python program to print the roots of a quadratic equation,"import math
a = float(input(""Enter the first coefficient: ""))
b = float(input(""Enter the second coefficient: ""))
c = float(input(""Enter the third coefficient: ""))
if (a!=0.0):
    d = (bb)-(4*a*c) 
    if (d==0.0):
        print(""The roots are real and equal."") 
        r = -b/(2*a)
        print(""The roots are "", r,""and"", r)
    elif(d>0.0):
        print(""The roots are real and distinct."")
        r1 = (-b+(math.sqrt(d)))/(2*a) 
        r2 = (-b-(math.sqrt(d)))/(2*a)
        print(""The root1 is: "", r1)
        print(""The root2 is: "", r2)
    else:
        print(""The roots are imaginary."")
        rp = -b/(2*a) 
        ip = math.sqrt(-d)/(2*a)
        print(""The root1 is: "", rp, ""+ i"",ip)
        print(""The root2 is: "", rp, ""- i"",ip)
else:
    print(""Not a quadratic equation."")

"
Write a Python program to count number of substrings with same first and last characters of a given string.,"def no_of_substring_with_equalEnds(str1): 
    result = 0; 
    n = len(str1); 
    for i in range(n): 
        for j in range(i, n): 
            if (str1[i] == str1[j]): 
                result = result + 1
    return result

"
Write a Python program to find the second smallest number in a list.,"def second_smallest(numbers):
    if (len(numbers)<2):
        return
    if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):
        return
    dup_items = set()
    uniq_items = []
    for x in numbers:
        if x not in dup_items:
            uniq_items.append(x)
            dup_items.add(x)
    uniq_items.sort()    
    return  uniq_items[1]

"
Write a Python function to check whether a list contains a sublist.,"def is_Sublist(l, s):
    sub_set = False
    if s == []:
        sub_set = True
    elif s == l:
        sub_set = True
    elif len(s) > len(l):
        sub_set = False
    else:
        for i in range(len(l)):
            if l[i] == s[0]:
                n = 1
                while (n < len(s)) and (l[i+n] == s[n]):
                    n += 1
                if n == len(s):
                    sub_set = True
    return sub_set

"
Write a Python program to print the list in a list of lists whose sum of elements is the highest.,"print(max(num, key=sum))

"
Write a Python function to create a multidimensional list (lists of lists) with zeros and print the output.,"nums = []
for i in range(3):
    nums.append([])
    for j in range(2):
        nums[i].append(0)
print(""Multidimensional list:"")
print(nums)

"
Write a Python program to calculate distance between two points using latitude and longitude.,"from math import radians, sin, cos, acos
print(""Input coordinates of two points:"")
slat = radians(float(input(""Starting latitude: "")))
slon = radians(float(input(""Ending longitude: "")))
elat = radians(float(input(""Starting latitude: "")))
elon = radians(float(input(""Ending longitude: "")))
dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))
print(""The distance is %.2fkm."" % dist)

"
Write a Python class to convert an integer to a roman numeral.,"class Solution:
    def int_to_Roman(self, num):
        val = [1000, 900, 500, 400,
            100, 90, 50, 40,
            10, 9, 5, 4,1]
        syb = [""M"", ""CM"", ""D"", ""CD"",
            ""C"", ""XC"", ""L"", ""XL"",
            ""X"", ""IX"", ""V"", ""IV"",""I""]
        roman_num = ''
        i = 0
        while  num > 0:
            for _ in range(num // val[i]):
                roman_num += syb[i]
                num -= val[i]
            i += 1
        return roman_num

"
write a python function to concatenate two integers like string concatenation and return concatenated number as integer,"def concat_two_numbers(num1, num2):
    combined_num = str(num1) + str(num2)
    return int(combined_num)

"
Write a Python function that takes a sequence of numbers and determines whether all the numbers are different from each other,"def test_distinct(data):
    if len(data) == len(set(data)):
        return True
    else:
        return False

"
Write a Python function to remove leading zeros from an IP address,"import re
regex = '\.[0]*'
def remove_leading_zeros(ip):
    modified_ip = re.sub(regex, '.', ip)
    return modified_ip

"
Write a Python program to typecast given input to integer,"num = int(input(""Input a value: ""))
print(num)

"
Write a Python function to check whether a given number is perfect number or not,"def perfect_number_checker(num):
    i = 2
    sum = 1
    while(i <= num//2 ) :
        if (num % i == 0) :
            sum += i
        i += 1
    if sum == num :
        return f'{num} is a perfect number'
    else :
        return f'{num} is not a perfect number'

"
Write a Python function to print the root of the quadratic equation,"def quadratic_root(A,B,C):
    import math
    d=((B**2)-4*A*C)
    if d>=0:
        s=(-B+(d)**0.5)/(2*A)
        p=(-B-(d)**0.5)/(2*A)
        print(math.floor(s),math.floor(p))
    else:
        print('The roots are imaginary')

"
Write a Python function to check whether a number is a power of another number or not,"def power_checker(a,b):
    import math
    s=math.log(a,b)
    p=round(s)
    if (b**p)==a:
        return f'{a} is the power of {b}.'
    else:
        return f'{a} is NOT the power of {b}.'

"
Write a Python function to find the intersection of two arrays,"def array_intersection(A,B):
    inter=list(set(A)&set(B))
    return inter

"
Write a Python function to print number with commas as thousands separators,"def formattedNumber(n):
    return (""{:,}"".format(n))

"
Write a Python function to count occurrence of a word in the given text,"def text_searcher(text, word):
    count = 0
    for w in text.split():
        if w == word:
            count = count + 1
    return count

"
Write a Python function to remove falsy values from a list,"def newlist(lst):
    return list(filter(None, lst))

"
Write a Python function to to find the sum of all digits of a given integer,"def sum_of_digits(num):
    if num == 0:
        return 0
    else:
        return num % 10 + sum_of_digits(int(num / 10))

"
Write a Python function to check all elements of a list are the same or not,"def check_equal(a):
    return a[1:] == a[:-1]

"
Write a Python program that removes items from set1 that are not common to both set1 and set2,"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
set1.intersection_update(set2)
print(set1)

"
Write a Python program to swap two tuples,"tuple1 = (11, 22)
tuple2 = (99, 88)
tuple1, tuple2 = tuple2, tuple1
print(tuple2)
print(tuple1)

"
Write a Python program to modify the second item (33) of a list inside a following tuple to 333,"tuple1 = (11, [22, 33], 44, 55)
tuple1[1][1] = 333
print(tuple1)

"
Write a Python function func1() such that it can accept a variable length of  argument and print all arguments value,"def func1(*args):
    for i in args:
        print(i)

"
"Write a Python function that Given a list of numbers, return True if first and last number of a list is same","def isFirst_And_Last_Same(numberList):
    firstElement = numberList[0]
    lastElement = numberList[-1]
    if (firstElement == lastElement):
        return True
    else:
        return False

"
"Write a Python function that Given a list of numbers, Iterate it and print only those numbers which are divisible of 5","def findDivisible(numberList):
    for num in numberList:
        if (num % 5 == 0):
            print(num)

"
Write a Python function that Given a two list of numbers create a new list such that new list should contain only odd numbers from the first list and even numbers from the second list,"def mergeList(list1, list2):
    thirdList = []
    for num in list1:
        if (num % 2 != 0):
            thirdList.append(num)
    for num in list2:
        if (num % 2 == 0):
            thirdList.append(num)
    return thirdList

"
Write a Python program to Find the day of week of a given date,"from datetime import datetime
given_date = datetime(2020, 7, 26)
print(given_date.strftime('%A'))

"
Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5 between 2000 and 3200 (both included).,"l=[]
for i in range(2000, 3201):
    if (i%7==0) and (i%5!=0):
        l.append(str(i))

"
write a function to find the sum of Sine series,"import math
def sin(x,n):
    sine = 0
    for i in range(n):
        sign = (-1)**i
        pi=22/7
        y=x*(pi/180)
        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign
    return sine

"
Write a program that prints the words in a comma-separated sequence after sorting them alphabetically.,"items=[x for x in input().split(',')]
items.sort()
print(','.join(items))

"
Write a function that takes a base and a power and finds the power of the base using recursion.,"def power(base,exp):
    if(exp==1):
        return(base)
    if(exp!=1):
        return(base*power(base,exp-1))
base=int(input(""Enter base: ""))
exp=int(input(""Enter exponential value: ""))
print(""Result:"",power(base,exp))

"
Write a program to get a list of locally installed Python modules,"import pkg_resources
installed_packages = pkg_resources.working_set
installed_packages_list = sorted([""%s==%s"" % (i.key, i.version)
     for i in installed_packages])
for m in installed_packages_list:
    print(m)

"
Write a program to find the median among three given number,"x=10
y=20
z=30
if y < x and x < z:
    print(x)
elif z < x and x < y:
    print(x)
elif z < y and y < x:
    print(y)
elif x < y and y < z:
    print(y)
elif y < z and z < x:
    print(z)    
elif x < z and z < y:
    print(z)

"
Write a function to return the area of a rhombus,"def area(d1, a): 
    d2 = (4*(a**2) - d1**2)**0.5
    area = 0.5 * d1 * d2 
    return(area) 

"
Write a function to calculate volume of Square Pyramid,"def volumeSquare(b, h): 
    return (0.33) * b * b * h 

"
"Write a python program using list comprehension to produce and print the list ['x', 'y', 'z', 'xx', 'yy', 'zz', 'xxx', 'yyy', 'zzz', 'xxxx', 'yyyy', 'zzzz']","
input_string_list = ['x', 'y', 'z']
repeat_count = 4
list3 = [input_string_list[i] * (j+1) for j in range(repeat_count)  for i in range(len(input_string_list)) ]
print(list3)

"
"Write a python program using list comprehension to produce and print the list [[2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8]]","
start_num = 2
repeat_count = 4
max_offset =4
list5 = [[start_num + i + j  for j in range(max_offset)]  for i in range(repeat_count) ]
print(list5)

"
"Write a python program using list comprehension to produce and print the list [(1, 1), (2, 1), (3, 1), (1, 2), (2, 2), (3, 2), (1, 3), (2, 3), (3, 3)]","
max_count = 3
list6 = [(j+1,i+1)  for i in range(max_count)  for j in range(max_count) ]
print(list6)

"
Write a python function to return list of all the possible gray code for a number given,"
def grayCode(n):
    if n == 0:
        return [0]
    if n == 1:
        return [0,1]
    res = []
    start = '0'*n
    visited = set()
    stk = [start]
    while stk:
        node = stk.pop()
        if node not in visited:
            res.append(int(node,2))            
            visited.add(node)
        if len(visited) == 2**n:
            break
        for i in range(n):
            newCh = '0' if node[i] == '1' else '1' 
            newNode = node[:i] + newCh + node[i+1:]
            if newNode not in visited:
                stk.append(newNode)
    return res

"
"Write a python function which wil return True if list parenthesis used in a input expression is valid, False otherwise","
def isValid(s):
    stack = []
    mapping = {')': '(', '}' : '{', ']':'['}
    for char in s:
        if char in mapping:                
            if not stack:
                return False
            top = stack.pop()
            if mapping[char] != top:
                return False
        else:
            stack.append(char)     
    return not stack

"
Write a python function to find and print if IP address given is a valid IP address or not,"
def Validate_IP(IP):
    import re
    regex = ""(([0-9]|[1-9][0-9]|1[0-9][0-9]|""\
            ""2[0-4][0-9]|25[0-5])\\.){3}""\
            ""([0-9]|[1-9][0-9]|1[0-9][0-9]|""\
            ""2[0-4][0-9]|25[0-5])""
    regex1 = ""((([0-9a-fA-F]){1,4})\\:){7}""\
             ""([0-9a-fA-F]){1,4}""
    p = re.compile(regex)
    p1 = re.compile(regex1)
    if (re.search(p, IP)):
        return ""Valid IPv4""
    elif (re.search(p1, IP)):
        return ""Valid IPv6""
    return ""Invalid IP""

"
Write a function to determine longest increasing subsequence of a list of numbers given,"
def longest_increaing_subsequence(myList):
    lis = [1] * len(myList)
    elements = [0] * len(myList)
    for i in range (1 , len(myList)):
        for j in range(0 , i):
            if myList[i] > myList[j] and lis[i]< lis[j] + 1:
                lis[i] = lis[j]+1
                elements[i] = j
    idx = 0
    maximum = max(lis)              
    idx = lis.index(maximum)
    seq = [myList[idx]]
    while idx != elements[idx]:
        idx = elements[idx]
        seq.append(myList[idx])
    return (maximum, reversed(seq))

"
Write a python class to implement Deque where elements can be added and deleted both ends,"
class Deque(object):
    def __init__(self, limit = 10):
        self.queue = []
        self.limit = limit
    def __str__(self):
        return ' '.join([str(i) for i in self.queue])
    def isEmpty(self):
        return len(self.queue) <= 0
    def isFull(self):
        return len(self.queue) >= self.limit
    def insertRear(self, data):
        if self.isFull():
            return
        else:
            self.queue.insert(0, data)
    def insertFront(self, data):
        if self.isFull():
            return
        else:
            self.queue.append(data)
    def deleteRear(self):
        if self.isEmpty():
            return
        else:
            return self.queue.pop(0)
    def deleteFront(self):
        if self.isFull():
            return
        else:
            return self.queue.pop()

"
Write a python class to implement PriorityQueue,"
class PriorityQueue(object):
    def __init__(self):
        self.queue = []
    def __str__(self):
        return ' '.join([str(i) for i in self.queue])
    def isEmpty(self):
        return len(self.queue) == []
    def insert(self, data):
        self.queue.append(data)
    def delete(self):
        try:
            max = 0
            for i in range(len(self.queue)):
                if self.queue[i] > self.queue[max]:
                    max = i
            item = self.queue[max]
            del self.queue[max]
            return item
        except IndexError:
            print()
            exit()

"
Write a program to print the powers of 2 using anonymous function,"
terms = 10
result = list(map(lambda x: 2 ** x, range(terms)))
print(""The total terms are:"",terms)
for i in range(terms):
    print(""2 raised to power"",i,""is"",result[i])

"
Write a python program to remove punctuations from a sentence,"
punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''

my_str = ""Hello!!!, he said ---and went.""

no_punct = """"
for char in my_str:
    if char not in punctuations:
        no_punct = no_punct + char

print(no_punct)

"
Write a program to left rotate and print a list given,"
arr = [1, 2, 3, 4, 5];     

n = 3;    

for i in range(0, n):    
    first = arr[0];    

    for j in range(0, len(arr)-1):    

        arr[j] = arr[j+1];    

    arr[len(arr)-1] = first;    

print(""Array after left rotation: "");    
for i in range(0, len(arr)):    
    print(arr[i]),  

"
Write a function to find out if permutations of a given string is a palindrome,"
def has_palindrome_permutation(the_string):
    unpaired_characters = set()

    for char in the_string:
        if char in unpaired_characters:
            unpaired_characters.remove(char)
        else:
            unpaired_characters.add(char)

    return len(unpaired_characters) <= 1                                   

"
Write a python function to check if cafe orders are served in the same order they are paid for,"
def is_first_come_first_served(take_out_orders, dine_in_orders, served_orders):
    if len(served_orders) == 0:
        return True

    if len(take_out_orders) and take_out_orders[0] == served_orders[0]:
        return is_first_come_first_served(take_out_orders[1:], dine_in_orders, served_orders[1:])

    elif len(dine_in_orders) and dine_in_orders[0] == served_orders[0]:
        return is_first_come_first_served(take_out_orders, dine_in_orders[1:], served_orders[1:])

    else:
        return False

"
Write a program to accept a number and print inverted star pattern,"
n=int(input(""Enter number of rows: ""))
for i in range (n,0,-1):
    print((n-i) * ' ' + i * '*')

"
"Write python function which Given an list distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target.","
def combinationSum(candidates, target):
    results = []
    def helper(i, path):
        if sum(path) == target:
            results.append(path[:])
            return

        if sum(path) > target:
            return

        for x in range(i, len(candidates)):
            path.append(candidates[x])
            helper(x, path)
            path.pop()

    helper(0, []) 
    return results

"
"Write a function Given a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead.","
def dailyTemperatures(T):
    stack = []
    res = [0 for _ in range(len(T))]
    for i, t1 in enumerate(T):
        while stack and t1 > stack[-1][1]:
            j, t2 = stack.pop()
            res[j] = i - j
        stack.append((i, t1))
    return res

"
Write a function to get the Cumulative sum of a list,"
def Cumulative(lists): 
    cu_list = [] 
    length = len(lists) 
    cu_list = [sum(lists[0:x:1]) for x in range(0, length+1)] 
    return cu_list[1:]

"
Write a program to perform Consecutive prefix overlap concatenation Using endswith() + join() + list comprehension + zip() + loop,"
def help_fnc(i, j): 
    for ele in range(len(j), -1, -1): 
        if i.endswith(j[:ele]): 
            return j[ele:] 

test_list = [""India"", ""gone"", ""new"", ""best""] 

print(""The original list is : "" + str(test_list)) 

res = ''.join(help_fnc(i, j) for i, j in zip([''] + 
                           test_list, test_list)) 

print(""The resultant joined string : "" + str(res)) 

"
Write a python program to convert complex number to polar coordinates,"
import cmath  

"
using cmath.polar() method,"num = cmath.polar(1)  
print(num) 

"
"Write a python function to perform Matrix Chain multiplication i.e. Given a sequence of matrices, find the most efficient way to multiply these matrices together","
import sys 

def MatrixChainOrder(p, i, j): 

    if i == j: 
        return 0

    _min = sys.maxsize 

    for k in range(i, j): 

        count = (MatrixChainOrder(p, i, k)  
             + MatrixChainOrder(p, k + 1, j) 
                   + p[i-1] * p[k] * p[j]) 

        if count < _min: 
            _min = count; 

    return _min; 

"
write a python program to find string in a list and print it,"list1 = [1, 2.0, 'have', 'a', 'nice', 'day'] 

s = 'nice'
for i in list1:
    if i == s:
        print(f'{s} is  present in the list')

"
write a python program to find decreasing point in a list and print them,"test_list = [3, 6, 8, 9, 12, 5, 18, 1] 

res = -1
for idx in range(0, len(test_list) - 1): 

    if test_list[idx + 1] < test_list[idx]: 
        res = idx 
        break

print(""Decreasing Point : "" + str(res)) 

"
Write a python program to find elements with the same index and print them,"
list1 = [3, 1, 2, 5, 4, 10, 6, 9] 

list2 = [] 
for idx, ele in enumerate(list1): 
    if idx == ele: 
        list2.append(ele) 

print(""Filtered elements : "" + str(list2))

"
Write a python function to remove i'th character from a string,"
def remove(string, i):  
    a = string[ : i]  

    b = string[i + 1: ] 

    return a + b 

"
Write a python program to filter similar case strings and print it,"
x=[]
for i in test_list:
    if i.islower() or i.isupper():
        print(x.append(i))

print(x) 

"
Write a python program to compute arithmetic operation from String and print it,"
test_str = '5x6, 9x10, 7x8'

"
write a python function to find all permutations of a string and print the result,"
ini_str = ""abc""

print(""Initial string"", ini_str) 
result = [] 

def permute(data, i, length):  
    if i == length:  
        result.append(''.join(data) ) 
    else:  
        for j in range(i, length):  
            data[i], data[j] = data[j], data[i]  
            permute(data, i + 1, length)  
            data[i], data[j] = data[j], data[i]   
permute(list(ini_str), 0, len(ini_str)) 
print(""Resultant permutations"", str(result))

"
write a python program  to print all pair combinations of two tuples,"
test_tuple1 = (4, 5) 
test_tuple2 = (7, 8) 

print(""The original tuple 1 : "" + str(test_tuple1)) 
print(""The original tuple 2 : "" + str(test_tuple2)) 

res =  [(a, b) for a in test_tuple1 for b in test_tuple2] 
res = res +  [(a, b) for a in test_tuple2 for b in test_tuple1] 

print(""The filtered tuple : "" + str(res)) 

"
write a python program to filter dictionaries with ordered values,"
test_list = [{'gfg': 2, 'is': 8, 'good': 10}, 
             {'gfg': 1, 'for': 10, 'geeks': 9}, 
             {'love': 3, 'gfg': 4}] 

res = [sub for sub in test_list if sorted( 
    list(sub.values())) == list(sub.values())] 

print(""The filtered Dictionaries : "" + str(res)) 

"
write a python program to  rotate dictionary by K,"
test_dict = {1: 6, 8: 1, 9: 3, 10: 8, 12: 6, 4: 9} 

K = 2 
test_dict = list(test_dict.items()) 
res = [test_dict[(i - K) % len(test_dict)] 
       for i, x in enumerate(test_dict)] 

res = {sub[0]: sub[1] for sub in res} 
print(""The required result : "" + str(res)) 

"
write a program  to divide dictionary and its keys into K equal dictionaries and print it,"
test_dict = {""Gfg"": 20, ""is"": 36, ""best"": 100} 
print(""The original dictionary is : "" + str(test_dict)) 
K = 4

s=list(test_dict.keys())
print(s)
q=list(test_dict.values())
t=[]
for i in q:
    t.append(i//K)
print(t)
q=[]
d={}
for i in range(K):
    for i in range(0,len(s)):
        d[s[i]] = t[i]
    q.append(d)
print(q) 

"
Write a  Python function to Sort a List of Dictionaries by the Sum of their Values and print it,"
test_list = [{1 : 3, 4 : 5, 3 : 5}, {1 : 7, 10 : 1, 3 : 10}, {1 : 100}, {8 : 9, 7 : 3}]

def func(test_list):
    return sum(list(test_list.values()))

for i in test_list:
    test_list.sort(key=func) 
print(test_list)

"
write a python program to update a dictionary with the values from a dictionary list and print it,"
test_dict = {""Gfg"" : 2, ""is"" : 1, ""Best"" : 3} 

print(""The original dictionary is : "" + str(test_dict)) 

dict_list = [{'for' : 3, 'all' : 7}, {'geeks' : 10}, {'and' : 1, 'CS' : 9}]

for i in dict_list:
    test_dict.update(i)
print(test_dict) 

"
write a python program that displays the key of list value with maximum range and print it,"
test_dict = {""Gfg"" : [6, 2, 4, 1], ""is"" : [4, 7, 3, 3, 8], ""Best"" : [1, 0, 9, 3]} 

max_res = 0
for sub, vals in test_dict.items(): 

    max_res = max(max_res, max(vals) - min(vals))     
    if max_res == max(vals) - min(vals): 
        res = sub 
print(""The maximum element key : "" + str(res)) 

"
write a python program  to add prefix to each key name in dictionary and print it,"
test_dict = {'Gfg' : 6, 'is' : 7, 'best' : 9, 'for' : 8, 'geeks' : 11}  
temp = ""Pro""

d={}
for key,value in test_dict.items():
    d.update({temp+key:value})
print(d)

"
write a python program to extract Kth index elements from Dictionary Value list and print it,"
test_dict = {""Gfg"" : [4, 7, 5], ""Best"" : [8, 6, 7], ""is"" : [9, 3, 8]} 
print(""The original dictionary is : "" + str(test_dict)) 
K = 1

s=[]
for key,value in test_dict.items():
    s.append(value[K])
print(s)    

"
write a python program to group Strings on Kth character and print it,"
test_list = [""gfg"", ""is"", ""best"", ""for"", ""geeks""] 
print(""The original list is : "" + str(test_list)) 
K = 2
d={}
for i in test_list:
    d.update({i[K-1]:[i]})
print(d) 

"
write a python program for printing custom order dictionary,"test_dict = {'is' : 2, 'for' : 4, 'gfg' : 1, 'best' : 3, 'geeks' : 5}  
ord_list = ['gfg', 'is', 'best', 'for', 'geeks'] 

c={}
for i in ord_list:
    if i in test_dict:
        c.update({i:test_dict[i]})
print(c) 

"
printing original list,"print(""The original list is : "" + str(test_list)) 
count=0
for i in test_list:
    if isinstance(i,dict):
        count=count+1
print(count)    

"
write a python program to decrement Dictionary value by K,"
test_dict = {'gfg' : 1, 'is' : 2, 'for' : 4, 'CS' : 5} 
print(""The original dictionary : "" + str(test_dict)) 
K = 5
for key,value in test_dict.items():
    test_dict.update({key:value-K})
print(test_dict) 

"
write a python program to remove given character from first element of Tuple and print it,"
test_list = [(""GF ! g !"", 5), (""! i ! s"", 4), (""best !!"", 10)] 
print(""The original list is : "" + str(test_list)) 

K = ""!""
res = [(sub[0].replace(K, ''), sub[1]) for sub in test_list]  
print(""The filtered tuples : "" + str(res)) 

"
write a python program to print rear element extraction from list of tuples records,"
test_list = [(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)] 
print (""The original list is : "" + str(test_list))
s=[]
for i in test_list:
    l=len(i)
    s.append(i[l-1])
print(s)

"
write a python program to raise elements of tuple as power to another tuple and print it,"
test_tup1 = (10, 4, 5, 6)  
test_tup2 = (5, 6, 7, 5) 
s=tuple() 
print(""The original tuple 1 : "" + str(test_tup1))  
print(""The original tuple 2 : "" + str(test_tup2))

for i in range(0,len(test_tup1)):
    s+= (test_tup1[i] ** test_tup2[i],)
print(s)

"
write a python program to sort list under tuples and print it,"
test_tup = ([7, 5, 4], [8, 2, 4], [0, 7, 5]) 
print(""The original tuple is : "" + str(test_tup)) 
s=tuple(sorted([j for j in i],reverse=False ) for i in test_tup)
print(f'the sorted list inside tuple is {s}')

"
write a python program to Join tuple elements in a list and print it,"
test_list = [('geeks', 'for', 'geeks'), 
             ('computer', 'science', 'portal')] 

print (""The original list is : "" + str(test_list)) 
l=[]
"
write a python function to remove last element in the list,"def remove_last_element_list(list1):
    list1.pop()
    return list1

"
"write a function to calculate the apothem of polygon given the number of edges, circumradius","import math
def apothem_of_polygon(number_of_edges, circumradius):
    return circumradius * math.cos(180/number_of_edges)

"
"write a function which converts temperature values, from Celsius(C) to Fahreinheit(F) and from Fahreinheit(F) to Celsius(C) given the temperature value and its unit","
def temp_converter(value, unit):
    if unit =='F' and value in range(32, 212):
        converts = (value - 32) * 5.0/9.0
        return converts
    elif unit =='C' and value in range(0,100):
        converts = (9.0/5.0) * value + 32
        return converts
    else:
        raise ValueError

"
Write a Python function to convert a string list to a normal list type,"import ast
def convert_string_to_list(str_lst):
    return ast.literal_eval(str_lst)

"
Write a Python function to find the median among three given numbers,"def find_the_median(x,y,z):
    list_ = sorted([x,y,z])
    return list_[1]

"
Write a python function to convert a string to a list,"def convert_str_to_list(string):
    return string.split(' ')

"
Write a python function to capitalize first and last letters of each word of a given string,"capitalize_both_ends = lambda x: x[0].upper() + x[1:-1] + x[-1].upper()

def capitalize_first_and_last(string):
    string = string.strip().split()
    new_string = [capitalize_both_ends(word) for word in string]
    return new_string

"
Write a Python function to check whether the input letter is a vowel or not,"def check_vowel_or_not(letter):
    result =  str(letter) in ""aeiou""
    return result

"
Write a Python program to find the available built-in modules using sys and textwrap modules,"import sys
import textwrap
module_name = ', '.join(sorted(sys.builtin_module_names))
print(textwrap.fill(module_name, width=70))

"
Write a Python function to reverse words in a string.,"def reverse_string_words(text):
    for line in text.split('\n'):
        return(' '.join(line.split()[::-1]))

"
Write a Python program to print the calendar of a given month and year,"import calendar
y = int(input(""Input the year : ""))
m = int(input(""Input the month : ""))
print(calendar.month(y, m))

"
Write a python function to get the volume of a cylinder with radius & height as input,"def cylinder_volume(radius, height):
    volume = 3.14 * (radius ** 2) * height
    return volume

"
Write a Python program to add a prefix text to all of the lines in a string.,"import textwrap
sample_text ='''
        Python is a widely used high-level, general-purpose, interpreted,
        dynamic programming language. Its design philosophy emphasizes
        code readability, and its syntax allows programmers to express
        concepts in fewer lines of code than possible in languages such
        as C++ or Java.
        '''
text_without_Indentation = textwrap.dedent(sample_text)
wrapped = textwrap.fill(text_without_Indentation, width=50)
final_result = textwrap.indent(wrapped, '> ')

"
Write a Python function to convert a list to a tuple.,"def convert_list_to_tuple(list_input):
    return tuple(list_input)

"
Write a Python function to return perrin's number,"def perrins_number(n):
    if n >= 0:
        if n == 0:
            return 3
        elif n == 1:
            return 0
        elif n == 2:
            return 2
        else:
            return perrins_number(n-3) + perrins_number(n-2)

"
Write a Python function to return cullen number,"def cullen_number(n):
    if n >= 0:
        return n * 2 ** n + 1

"
write a python program to print two sets union using operations like in mathematic,"
E = {0, 2, 4, 6, 8};
N = {1, 2, 3, 4, 5};

print(""Union of E and N is"",E | N)

"
write a python program to check if the number is an Armstrong number or not,"
num = 663
sum = 0

temp = num
while temp > 0:
    digit = temp % 10
    sum += digit ** 3
    temp //= 10

if num == sum:
    print(num,""is an Armstrong number"")
else:
    print(num,""is not an Armstrong number"")

"
make sure all of dict's values are unique,"assert len(_dict) == len(set(_dict.values()))
reversed_dict = {v: k for k, v in _dict.items()}
print(reversed_dict)

"
write a python program to sort a dictionary by its values and print the sorted dictionary with 'key' argument.,"
d = {'apple': 10, 'orange': 20, 'banana': 5, 'rotten tomato': 1}
print(sorted(d.items(), key=lambda x: x[1]))

"
write a Python program to demonstrate working of Words Frequency in String Shorthands,"
test_str = 'Gfg is best . Geeks are good and Geeks like Gfg'

print(""The original string is : "" + str(test_str)) 
res = {key: test_str.count(key) for key in test_str.split()} 
print(""The words frequency : "" + str(res)) 

"
write a Python function to Remove all duplicates from a given string,"def removeDuplicate(str): 
    s=set(str) 
    s="""".join(s) 
    print(""Without Order:"",s) 
    t="""" 
    for i in str: 
        if(i in t): 
            pass
        else: 
            t=t+i 
    print(""With Order:"",t) 

str1=""geeksforgeeks""
removeDuplicate(str1) 

"
write a Python program to demonstrate working of Replace duplicate Occurrence in String,"
test_str = 'Gfg is best . Gfg also has Classes now. Classes help understand better . '

print(""The original string is : "" + test_str) 

repl_dict = {'Gfg' : 'It', 'Classes' : 'They' } 

test_list = test_str.split(' ') 
res = ' '.join([repl_dict.get(val) if val in repl_dict.keys() and test_list.index(val) != idx 
                                else val for idx, val in enumerate(test_list)]) 

print(""The string after replacing : "" + res) 

"
write a Python function to find time for a given angle.,"
def calcAngle(hh, mm): 

    hour_angle = 0.5 * (hh * 60 + mm) 
    minute_angle = 6 * mm 

    angle = abs(hour_angle - minute_angle) 

    angle = min(360 - angle, angle) 

    return angle 

def printTime(theta): 

    for hh in range(0, 12): 
        for mm in range(0, 60): 
            if (calcAngle(hh, mm)==theta): 
                print(hh, "":"", mm, sep = """") 
                return

    print(""Input angle not valid."") 
    return

theta = 90.0
printTime(theta) 

"
write a Python function to Non-Repeating Integers,"def non_repeats(radix):
    count = 0
    for num_digits in range(1, radix + 1):
        product = radix - 1
        for i in range(1, num_digits):
            product *= (radix - i)
        count += product
    return count

print(non_repeats(6))

"
write a Python function to find volume of the Pentagonal Prism,"
def volume(b, h): 
    return (5 * b * h) / 2

a = 5
b = 3
h = 7

print(""volume ="", volume(b, h)) 

"
write a Python function to return the volume of the rectangular right wedge,"def volumeRec(a, b, e, h) : 
    return (((b * h) / 6) * (2 * a + e))

a = 2; b = 5; e = 5; h = 6; 
print(""Volume = "",volumeRec(a, b, e, h))

"
write a Python program to demonstrate working of Convert String to tuple list,"
test_str = ""(1, 3, 4), (5, 6, 4), (1, 3, 6)""

print(""The original string is : "" + test_str) 

res = [] 
temp = [] 
for token in test_str.split("", ""): 
    num = int(token.replace(""("", """").replace("")"", """")) 
    temp.append(num) 
    if "")"" in token: 
        res.append(tuple(temp)) 
        temp = [] 

print(f""List after conversion from string : {res}"")

"
write Python program to demonstrate check if list are identical,"
test_list1 = [1, 2, 4, 3, 5] 
test_list2 = [1, 2, 4, 3, 5] 

print (""The first list is : "" + str(test_list1)) 
print (""The second list is : "" + str(test_list2)) 

test_list1.sort() 
test_list2.sort() 

if test_list1 == test_list2: 
    print (""The lists are identical"") 
else : 
    print (""The lists are not identical"") 

"
write Python program to find Mathematical Median of Cumulative Records,"
test_list = [(1, 4, 5), (7, 8), (2, 4, 10)] 

print(""The original list : "" + str(test_list)) 

res = [] 
for sub in test_list : 
    for ele in sub : 
        res.append(ele) 
res.sort() 
mid = len(res) // 2
res = (res[mid] + res[~mid]) / 2

print(""Median of Records is : "" + str(res)) 

"
Python program to get a string which is n (non-negative integer) copies of a given string.,"def larger_string(string1, n):
    result = """"
    for i in range(n):
        result = result + string1
    return result

print(larger_string('abc', 2))
print(larger_string('.py', 3))

"
"Python program to find whether a given number (accept from the user) is even or odd, print out an appropriate message to the user.","def check_number(num):
    mod = num % 2
    if mod > 0:
        return ""This is an odd number.""
    else:
        return ""This is an even number.""

print(check_number(5))

"
Python program to calculate area of a circle,"
def area(a):
    from math import pi
    r = float(input(""Input the radius of the circle : ""))
    return ""The area of the circle with radius "" + str(r) + "" is: "" + str(pi * a ** 2)

print(area(5))

"
Python program to get the n (non-negative integer) copies of the first 2 characters of a given string. Return the n copies of the whole string if the length is less than 2.,"def substring_copy(str, n):
    flen = 2
    if flen > len(str):
        flen = len(str)
    substr = str[:flen]

    result = """"
    for i in range(n):
        result = result + substr
    return result

print(substring_copy('abcdef', 2))
print(substring_copy('p', 3))

"
Python program to reverse the string,"def string_reverse(str1):
    rstr1 = ''
    index = len(str1)
    while index > 0:
        rstr1 += str1[index - 1]
        index = index - 1
    return rstr1

print(string_reverse('1234abcd'))

"
python program to return unique element from a list,"def unique_list(l):
    x1 = []
    for a in l:
        if a not in x1:
            x1.append(a)
    return x1

print(unique_list([1, 2, 3, 3, 3, 3, 4, 5]))

"
Python program to access function iside function,"def test(a):
    def add(b):
        nonlocal a
        a += 1
        return a + b
    return add

"
Python function to check whether a number is divisible by another number,"def multiple(m, n):
    return True if m % n == 0 else False

print(multiple(20, 5))
print(multiple(7, 2))

"
Write a function to get n elements of the fibonacci series,"def fibonacci(n):
    n1, n2 = 0, 1
    count = 0

    if n <= 0:
        print('Please enter a positive integer')
    elif n == 1:
        print(""Fibonacci sequence:"")
        print(n1)
    else:
        print(""Fibonacci sequence:"")
        while count < n:
            print(n1)
            nth = n1 + n2
            # update values
            n1, n2 = n2, nth
            count += 1

"
write a python program to subtract two numbers,"num1 = 1.5
num2 = 6.3
sum = num1 - num2
print(f'Sub: {sum}')

"
Python Program to Find Numbers Divisible by Another Number,"my_list = [12, 65, 54, 39, 102, 339, 221,]
result = list(filter(lambda x: (x % 13 == 0), my_list))
print(""Numbers divisible by 13 are"",result)

"
Python Program to Convert Decimal to Octal,"dec = 344

print(""The decimal value of"", dec, ""is:"")
print(oct(dec), ""in octal."")

"
Python Program to Find ASCII Value of Character,"c = 'p'
print(""The ASCII value of '"" + c + ""' is"", ord(c))

"
Write a python function to find HCf or GCD and return the value,"def compute_hcf(x, y):
    if x > y:
        smaller = y
    else:
        smaller = x
    for i in range(1, smaller+1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i 
    return hcf

"
Python Program to Transpose a Matrix using Nested Loop,"
X = [[12,7],
    [4 ,5],
    [3 ,8]]

result = [[0,0,0],
         [0,0,0]]

for i in range(len(X)):
    for j in range(len(X[0])):
        result[j][i] = X[i][j]

for r in result:
    print(r)

"
Python Program to Transpose a Matrix using Nested List Comprehension,"
X = [[12,7],
    [4 ,5],
    [3 ,8]]

result = [[X[j][i] for j in range(len(X))] for i in range(len(X[0]))]

for r in result:
    print(r)

"
Python Program to Count the Number of Each Vowel Using a list and a dictionary comprehension,"
ip_str = 'Hello, have you tried our tutorial section yet?'
ip_str = ip_str.casefold()
count = {x:sum([1 for char in ip_str if char == x]) for x in 'aeiou'}
print(count)

"
"Write a python function to derive slope given 2 points (x1,y1) and (x2, y2)","def get_slope(x1,y1, x2,y2):
    if (x1 == x2 ):
        return ValueError
    return -((y2-y1)/(x2-x1))

"
Write a python function to join directory names to create a path,"def join_filename(base_dir, *args):
    file_path_args = [base_dir ,*args]
    for file_name in file_path_args:
        if( isinstance(file_name,str) ==False ):
            raise TypeError
    return ""/"".join(file_path_args)

"
Write a python function to raise error when an input is not a string type,"def check_string(new_str):
    return isinstance(new_str,str)

"
Write a python function to find all email-id patterns in a given string and write to a user input file,"import re
def extract_mailid(my_string, outfile):
    regex = re.compile(r'[\w]+@[\w]+\.[\w]+', re.UNICODE)    
    mailids = regex.findall(my_string)
    if(len(mailids) > 0):
        with open(outfile, 'w') as mailfile:
            for mailid in mailids:
                mailfile.write(mailid+""\n"")
        mailfile.close()

"
Write a python function to return the content of a directory and the last modified date,"import glob
import os
import time
def retrieve_files_bydate(src_dir_path,*args):
    if(os.path.exists(src_dir_path) == False):
        print(""Destination Path doesn't exist"")
        return
    files_in_dir = glob.glob(src_dir_path+""/*.*"")
    if (len(files_in_dir) <= 0):
        print(""No files present in:"",src_dir_path)
        return
    file_date_list = [ (filename, time.ctime(os.path.getmtime(filename)))for filename in files_in_dir]
    return file_date_list

"
"Write a python function to generate amortization schedule given initial loan amount, interest rate, annual payments and tenure.","import itertools
def loan_schedule(principal, interest_rate, annual_payment, tenure):
    if(tenure <= 0):
        print(""Invalid tenure"",tenure)
        raise ValueError
    if(interest_rate > 1 or interest_rate < 0):
        print(""Invalid interest rate"",interest_rate,"" Expected between 0 and 1"")
        raise ValueError
    cashflows = [principal, *list(itertools.repeat(-annual_payment, tenure))]
    effective_interest_rate = 1+interest_rate
    return [ val for val in list(itertools.accumulate(cashflows, lambda bal, pmt: (bal*effective_interest_rate + pmt))) if val > 0]

"
"Write a python function to accept user defined file, user-defined loglevel and create a file-based and invoke the user-defined function with this logger.","import logging
def create_logging_level(user_func, user_filename, user_loglevel):
    logger = logging.getLogger('simple_example')
    logger.setLevel(user_loglevel)
    ch = logging.FileHandler(user_filename)
    ch.setLevel(user_loglevel)
    logger.addHandler(ch)

    if callable(user_func):
        user_func(logger)

"
write a program to find and print the largest among three numbers,"
num1 = 10
num2 = 12
num3 = 14
if (num1 >= num2) and (num1 >= num3):
    largest = num1
elif (num2 >= num1) and (num2 >= num3):
    largest = num2
else:
    largest = num3
print(f'largest:{largest}')

"
"Write a python program to swap two variables, Using a temporary variable","
x = 5
y = 10

temp = x
x = y
y = temp

print('The value of x after swapping: {}'.format(x))
print('The value of y after swapping: {}'.format(y))

"
Python Program to Display the multiplication Table,"num = 12

for i in range(1, 11):
    print(num, 'x', i, '=', num*i)

"
check if the number of terms is valid,"if nterms <= 0:
    print(""Please enter a positive integer"")
elif nterms == 1:
    print(""Fibonacci sequence upto"",nterms,"":"")
    print(n1)
else:
    print(""Fibonacci sequence:"")
    while count < nterms:
        print(n1)
        nth = n1 + n2
        # update values
        n1 = n2
        n2 = nth
        count += 1
"
initialize sum,"sum = 0

"
display the result,"if num == sum:
    print(num,""is an Armstrong number"")
else:
    print(num,""is not an Armstrong number"")

"
Python Program to Check Armstrong Number (for 3 digits),"num = 1634
order = len(str(num))
sum = 0
temp = num
while temp > 0:
    digit = temp % 10
    sum += digit ** order
    temp //= 10
if num == sum:
    print(num,""is an Armstrong number"")
else:
    print(num,""is not an Armstrong number"")

"
Python Program to Find Armstrong Number in an Interval,"lower = 100
upper = 2000

for num in range(lower, upper + 1):
    order = len(str(num))
    sum = 0
    temp = num
    while temp > 0:
        digit = temp % 10
        sum += digit ** order
        temp //= 10

    if num == sum:
        print(num)

"
Python Program To Display Powers of 2 Using Anonymous Function,"
terms = 10
result = list(map(lambda x: 2 ** x, range(terms)))
print(""The total terms are:"",terms)
for i in range(terms):
    print(""2 raised to power"",i,""is"",result[i])

"
Python Program to Find Numbers Divisible by Another Number,"my_list = [12, 65, 54, 39, 102, 339, 221,]

result = list(filter(lambda x: (x % 13 == 0), my_list))
print(""Numbers divisible by 13 are"",result)

"
Python Program to Find ASCII Value of Character,"c = 'p'
print(""The ASCII value of '"" + c + ""' is"", ord(c))

"
Python Program to Find HCF or GCD,"
def compute_hcf(x, y):
    if x > y:
        smaller = y
    else:
        smaller = x
    for i in range(1, smaller+1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i 
    return hcf

num1 = 54 
num2 = 24

print(""The H.C.F. is"", compute_hcf(num1, num2))

"
Python Program to Compute LCM Using GCD,"
"
This function multiplies two numbers,"def multiply(x, y):
    return x * y

"
Python Program to Display Fibonacci Sequence Using Recursion,"def recur_fibo(n):
    if n <= 1:
        return n
    else:
        return(recur_fibo(n-1) + recur_fibo(n-2))

nterms = 10

"
"Given a string, find the length of the longest substring without repeating characters.","str = ""IshwarVenugopal""

def longest_non_repeat(str):   
    i=0
    max_length = 1

    for i,c in enumerate(str):       
        start_at = i
        sub_str=[]         
        while (start_at < len(str)) and (str[start_at] not in sub_str):
            sub_str.append(str[start_at])
            start_at = start_at + 1

        if len(sub_str) > max_length:
            max_length = len(sub_str)

        print(sub_str)

    return max_length

longest_non_repeat(str)

"
"Given an array of integers, return indices of the two numbers such that they add up to a specific target.","input_array = [2, 7, 11, 15]
target = 26
result = []

for i, num in enumerate(input_array):
    for j in range(i+1, len(input_array)):
        print(i,j)

"
Rotate an array of n elements to the right by k steps.,"org = [1,2,3,4,5,6,7]
result = org[:]
steps = 3

for idx,num in enumerate(org):
    if idx+steps < len(org):
        result[idx+steps] = org[idx]
    else:
        result[idx+steps-len(org)] = org[idx]

print(result)

"
Adding Element to a List,"animals = ['cat', 'dog', 'rabbit']
animals.append('guinea pig')
print('Updated animals list: ', animals)

"
Count Tuple Elements Inside List,"random = ['a', ('a', 'b'), ('a', 'b'), [3, 4]]
count = random.count(('a', 'b'))
print(""The count of ('a', 'b') is:"", count)

"
Create and print a dictionary,"thisdict = {
    ""brand"": ""Ford"",
    ""model"": ""Mustang"",
    ""year"": 1964
}
print(f""Sample Dictionary:{thisdict}"")

"
Count the number of spaces in a sring,"s = ""Count, the number of spaces""
lenx = s.count(' ')
print(f""number of spaces in sring: {lenx}"")

"
Counting total Digits in a string,"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0,len(str1)):
    char = str1[i]
    if(char.isdigit()):
        digitCount += 1
print('Number of digits: ',digitCount)

"
Convert dictionary to JSON,"import json
person_dict = {'name': 'Bob',
'age': 12,
'children': None
}
person_json = json.dumps(person_dict)
print(person_json)

"
Check if there is a value for a key in JSON,"import json

studentJson =""""""{
   ""id"": 1,
   ""name"": ""Ishwar Venugopal"",
   ""class"": null,
   ""percentage"": 35,
   ""email"": ""ishwarraja@gmail.com""
}""""""
student = json.loads(studentJson)
if not (student.get('email') is None):
    print(""value is present for given JSON key"")
    print(student.get('email'))
else:
    print(""value is not present for given JSON key"")

"
Remove empty strings from the list of strings,"list1 = [""Mike"", """", ""Emma"", ""Kelly"", """", ""Brad""]
resList = [i for i in (filter(None, list1))]
print(resList)

"
Generate 3 random integers between 100 and 999 which is divisible by 5,"import random

print(""Generating 3 random integer number between 100 and 999 divisible by 5"")
for num in range(3):
    print(random.randrange(100, 999, 5), end=', ')

"
Generate a random date between given start and end dates,"import random
import time

def getRandomDate(startDate, endDate ):
    print(""Printing random date between"", startDate, "" and "", endDate)
    randomGenerator = random.random()
    dateFormat = '%m/%d/%Y'

    startTime = time.mktime(time.strptime(startDate, dateFormat))
    endTime = time.mktime(time.strptime(endDate, dateFormat))

    randomTime = startTime + randomGenerator * (endTime - startTime)
    randomDate = time.strftime(dateFormat, time.localtime(randomTime))
    return randomDate

print (""Random Date = "", getRandomDate(""1/1/2016"", ""12/12/2018""))

"
Convert decimal number to octal,"print('%o,' % (8))

"
Subtract a week from a given date,"from datetime import datetime, timedelta
given_date = datetime(2020, 2, 25)
days_to_subtract = 7
res_date = given_date - timedelta(days=days_to_subtract)
print(res_date)

"
Calculate number of days between two given dates,"from datetime import datetime

date_1 = datetime(2020, 2, 25).date()
date_2 = datetime(2020, 9, 17).date()
delta = None
if date_1 > date_2:
    delta = date_1 - date_2
else:
    delta = date_2 - date_1
print(""Difference is"", delta.days, ""days"")

"
Generate a Python list of all the even numbers between two given numbers,"num1 = 4
num2 = 30
myval = [i for i in range(num1, num2, 2)]
print(myval)

"
Return the largest item from the given list,"aList = [4, 6, 8, 24, 12, 2]
print(max(aList))

"
"Write a program to extract each digit from an integer, in the reverse order","number = 7536
while (number > 0):
    digit = number % 10
    number = number // 10
    print(digit, end="" "")

"
Write a Python program to validate an Email,"import re 
regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
def check(email):
    if(re.search(regex,email)):
        print(""Valid Email"")
    else:
        print(""Invalid Email"")

email = ""ishwarraja@gmail.com""
check(email)

"
Write a Program to implement validation of a Password,"class Password:
    def __init__(self, password):
        self.password = password

    def validate(self):        
        vals = {
            'Password must contain an uppercase letter.': lambda s: any(x.isupper() for x in s),
            'Password must contain a lowercase letter.': lambda s: any(x.islower() for x in s),
            'Password must contain a digit.': lambda s: any(x.isdigit() for x in s),
            'Password must be at least 8 characters.': lambda s: len(s) >= 8,
            'Password cannot contain white spaces.': lambda s: not any(x.isspace() for x in s)            
        } 
        valid = True  
        for n, val in vals.items():                         
            if not val(self.password):                   
                valid = False
                return n
        return valid                

input_password = ""Ishwar@12Su@ 1'""
p = Password(input_password)
if p.validate() is True:
    print('Password Valid')
else:
    print(p.validate())

"
3. python function to return the squares of a list of numbers,"def sq(n):
    return [i**2 for i in range(n)]

"
3. python function to return the squareroot of a list of numbers,"def sqrt(n):
    return [i**0.5 for i in range(n)]

"
10. python function to find the area of a circle,"def circle_area(r):
    return 22/7 * r**2

"
15. python function for datetime,"from datetime import datetime
datetime.utcnow()
def log(msg, *, dt = datetime.utcnow()):
    print(f'Message at {dt} was {msg}')

"
18. python program to compare strings,"def compare_using_equals(n):
    a = 'a long string that is not intered' * 200
    b = 'a long string that is not intered' * 200
    for i in range(n):
        if a == b:
            pass

"
19. python program to compare strings using interning,"import sys
def compare_using_interning(n):
    a = sys.intern('a long string that is not intered' * 200)
    b = sys.intern('a long string that is not intered' * 200)
    for i in range(n):
        if a is b:
            pass

"
22. python program to find if given co-ordinates are inside circle,"from random import uniform
from math import sqrt
def random_shot(rad):
    r_x = uniform(-rad, rad)
    r_y = uniform(-rad, rad)

    if sqrt(r_x**2 + r_y**2) <= rad:
        is_in_circle = True
    else:
        is_in_circle = False

    return r_x, r_y, is_in_circle

"
30. Python Program to find Largest of Three Numbers,"
a = float(input(""Please Enter the First value: ""))
b = float(input(""Please Enter the First value: ""))
c = float(input(""Please Enter the First value: ""))

if (a > b and a > c):
    print(""{0} is Greater Than both {1} and {2}"". format(a, b, c))
elif (b > a and b > c):
    print(""{0} is Greater Than both {1} and {2}"". format(b, a, c))
elif (c > a and c > b):
    print(""{0} is Greater Than both {1} and {2}"". format(c, a, b))
else:
    print(""Either any two values or all the three values are equal"")

"
32. Python Program to Convert String to Uppercase,"
string = input(""Please Enter your Own String : "")

string1 = string.upper()

print(""\nOriginal String in Lowercase  =  "", string)
print(""The Given String in Uppercase =  "", string1)

"
39. write a Python program to reverse a linked list,"
class Node: 
    def __init__(self, data): 
        self.data = data 
        self.next = None

class LinkedList: 
    def __init__(self): 
        self.head = None

    def reverse(self): 
        prev = None
        current = self.head 
        while(current is not None): 
            next = current.next
            current.next = prev 
            prev = current 
            current = next
        self.head = prev 

    def push(self, new_data): 
        new_node = Node(new_data) 
        new_node.next = self.head 
        self.head = new_node 

    def printList(self): 
        temp = self.head 
        while(temp): 
            print(temp.data)
            temp = temp.next

llist = LinkedList() 
llist.push(20) 
llist.push(4) 
llist.push(15) 
llist.push(85) 

print(""Given Linked List"")
llist.printList() 
llist.reverse() 
print(""\nReversed Linked List"")
llist.printList() 

"
51. python function for finding softmax output of a vector,"
def softmax(x):
    """"""returns the softmax output of a vector""""""

    if(type(x) == int or type(x) == float):

        return 1

    denom = 0

    for i in x:

        denom+=math.exp(i)

    new_vec = []

    for i in x:

        new_vec.append(math.exp(i)/denom)

    return new_vec

"
52. python function for finding the hyperbolic tangent value of a number,"def tanh(x):
    """""" returns the hyperbolic tangent value of a number""""""

    return math.tanh(x)

"
write a program to check if a substring is present in a given string,"
string = ""how are you?""
substring = ""are""
if (string.find(substring) == -1): 
    print(""NO"") 
else: 
    print(""YES"")  

"
write a program to print length of a string,"
str1 = ""great way to learn!""
print(len(str1))

"
write a program to replace duplicate word occurence in String,"
str1 = ""IISC is the best. IISC has Classes in the evening for professionals. Classes help to learn new things.""

repl_dict = {'IISC':'It', 'Classes': 'They'}

str_list = str1.split(' ') 

res = set() 

for idx, ele in enumerate(str_list): 
    if ele in repl_dict: 
        print(str(idx) + '  '+ele)
        if ele in res: 
            str_list[idx] = repl_dict[ele] 
        else: 
            res.add(ele)

res = ' '.join(str_list)

print(""Replaced String: "" + str(res))

"
write a program to replace multiple words with a single word,"
str1 = 'CoffeeDay is best for coffee and having long conversations'

word_list = [""best"", 'long'] 

repl_word = 'good'

res = ' '.join([repl_word if idx in word_list else idx for idx in str1.split()]) 

print(""String after multiple replace : "" + str(res))

"
write a function to replace all occurances of a substring in a string,"
str1 = ""Hello! It is a Good thing""
substr1 = ""Good""
substr2 = ""bad""

replaced_str = str1.replace(substr1, substr2)

print(""String after replace :"" + str(replaced_str))

"
write a program to break up string into individual elements,"
str1 = ""whatisthis""

split_string = list(''.join(str1)) 

print(split_string) 

"
write a program to increment number which is at end of string,"
import re 

str1 = 'count001'

res = re.sub(r'[0-9]+$', 
             lambda x: f""{str(int(x.group())+1).zfill(len(x.group()))}"",  
             str1) 

print(""Incremented numeric String : "" + str(res))

"
write a funtion that accepts two lists of equal length and converts them into a dictioinary,"def list_to_dict(list1, list2):
    return dict(zip(list1, list2))

"
write a program that prints the number of unique keys in a list of dictionaries.,"list_of_dicts = [{""key1"": ""val1"", ""Country"": ""India""}, 
                 {""Country"": ""USA"", ""foo"": ""bar""},
                 {""foo"": ""bar"", ""foo2"":""bar2""}]
unique_keys = []
for d in list_of_dicts:
    for key in d:
        if key not in unique_keys:
            unique_keys.append(key)
print(f""Number of unique keys: {len(unique_keys)}"")

"
write a Python program to replace the value of a particular key with nth index of value if the value of the key is list.,"test_list = [{'tsai': [5, 3, 9, 1], 'is': 8, 'good': 10}, 
             {'tsai': 1, 'for': 10, 'geeks': 9}, 
             {'love': 4, 'tsai': [7, 3, 22, 1]}]   
N = 2
key = ""tsai""  
for sub in test_list: 
    if isinstance(sub[key], list): 
        sub[key] = sub[key][N]

"
write a program to convert a list of dictionary to list of tuples and print it.,"ini_list = [{'a':[1, 2, 3], 'b':[4, 5, 6]}, 
            {'c':[7, 8, 9], 'd':[10, 11, 12]}] 
temp_dict = {} 
result = [] 
for ini_dict in ini_list: 
    for key in ini_dict.keys(): 
        if key in temp_dict: 
            temp_dict[key] += ini_dict[key] 
        else: 
            temp_dict[key] = ini_dict[key]   
for key in temp_dict.keys(): 
    result.append(tuple([key] + temp_dict[key])) 
print(""Resultant list of tuples: {}"".format(result))

"
write a program to print keys in a dictionary whose values are greater than a given input.,"test_dict = {'tsai' : 4, 'random_key' : 2, 'foo' : 3, 'bar' : 'END'} 
K = 3
res = {key : val for key, val in test_dict.items() 
                   if type(val) != int or val > K} 
print(""Values greater than K : "", res.keys())

"
write a python function to return a flattened dictionary from a nested dictionary input,"def flatten_dict(dd, separator ='_', prefix =''): 
    flattened =  { prefix + separator + k if prefix else k : v 
             for kk, vv in dd.items() 
             for k, v in flatten_dict(vv, separator, kk).items() 
             } if isinstance(dd, dict) else { prefix : dd } 
    return flattened

"
write a program to combine two dictionaries using a priority dictionary and print the new combined dictionary.,"test_dict1 = {'Gfg' : 1, 'is' : 2, 'best' : 3} 
test_dict2 = {'Gfg' : 4, 'is' : 10, 'for' : 7, 'geeks' : 12} 
prio_dict = {1 : test_dict2, 2: test_dict1} 
res = prio_dict[2].copy() 
for key, val in prio_dict[1].items(): 
    res[key] = val 
print(""The dictionary after combination : "" + str(res))

"
write a program to concatenate values with same keys in a list of dictionaries. Print the combined dictionary.,"test_list = [{'tsai' : [1, 5, 6, 7], 'good' : [9, 6, 2, 10], 'CS' : [4, 5, 6]}, 
             {'tsai' : [5, 6, 7, 8], 'CS' : [5, 7, 10]}, 
             {'tsai' : [7, 5], 'best' : [5, 7]}] 
res = dict() 
for inner_dict in test_list: 
    for inner_list in inner_dict: 
        if inner_list in res: 
            res[inner_list] += (inner_dict[inner_list]) 
        else: 
            res[inner_list] = inner_dict[inner_list]  
print(""The concatenated dictionary : "" + str(res))

"
write a python program to add an element to a list. Print the final list.,"lst = [""Jon"", ""Kelly"", ""Jessa""]
lst.append(""Scott"")
print(lst)

"
Write a python function to get the Cumulative sum of a list,"def Cumulative(lists): 
    cu_list = [] 
    length = len(lists) 
    cu_list = [sum(lists[0:x:1]) for x in range(0, length+1)] 
    return cu_list[1:]

    # Write a python program to print if a string ""hello"" is present in the list
l = [1, 2.0, 'hello','have', 'a', 'good', 'day'] 

s = 'hello'  

if s in l: 
    print(f'{s} is present in the list') 
else: 
    print(f'{s} is not present in the list') 

"
Write a python program to print the distance between first and last occurrence of even element.,"
test_list = [1, 3, 7, 4, 7, 2, 9, 1, 10, 11] 

indices_list = [idx for idx in range( 
    len(test_list)) if test_list[idx] % 2 == 0] 

res = indices_list[-1] - indices_list[0] 

print(""Even elements distance : "" + str(res)) 

"
Write a python program to print a list with all elements as 5 and of length 10,"
list1 = [5] * 10

print(list1)

"
Write a python program to convert each list element to key-value pair. Print the final dictionary,"
test_list = [2323, 82, 129388, 234, 95] 

print(""The original list is : "" + str(test_list)) 

res = dict() 
for ele in test_list: 

    mid_idx = len(str(ele)) // 2
    key = int(str(ele)[:mid_idx]) 
    val = int(str(ele)[mid_idx:]) 

    res[key] = val 

print(""Constructed Dictionary : "" + str(res)) 

"
Write a python program for print all elements with digit 7.,"
test_list = [56, 72, 875, 9, 173]  

K = 7

res = [ele for ele in test_list if str(K) in str(ele)] 

print(""Elements with digit K : "" + str(res))

"
Write a python program to print positive Tuples in List.,"
test_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)] 

print(""The original list is : "" + str(test_list)) 

res = [sub for sub in test_list if all(ele >= 0 for ele in sub)] 

print(""Positive elements Tuples : "" + str(res))

"
"write a python function that would filter a list of dictionaries where a specified key equals given value, list_of_dictionaries, key and value are inputs to this function.","def filter_with_key_value(list_of_dicts, key, value):
    return list( filter( lambda x: x.get(key) == value, list_of_dicts ) )

"
write a python function that returns the square of a given input number,"def square(x):
    return x**2

"
write a recursive python function that performs merge sort on the given list or tuple or string and returns the new sorted sequence,"def sort_and_merge(l1, l2):
    new_list = []
    i = 0
    j = 0
    l1_len = len(l1)
    l2_len = len(l2)
    while (i <= l1_len-1) and (j <= l2_len-1):
        if l1[i] < l2[j]:
            new_list.append(l1[i])
            i +=1
        else:
            new_list.append(l2[j])
            j +=1
    if i <= (l1_len-1):
        new_list += l1[i:]
    if j <= (l2_len-1):
        new_list += l2[j:]
    return new_list

def recursive_merge_sort(list_to_be_sorted):
    final_list = []
    first = 0
    last = len(list_to_be_sorted)
    if last <= 1:
        final_list.extend( list_to_be_sorted )
    else:
        mid = last // 2
        l1 = recursive_merge_sort( list_to_be_sorted[:mid] )
        l2 = recursive_merge_sort( list_to_be_sorted[mid:] )
        final_list.extend( sort_and_merge( l1, l2 ) )
    return final_list

"
Write a function to return the cartisian distance between two points,"def cal_cart_distance(x1:float,y1:float,x2:float,y2:float)->float:
    return ((x1-x2)**2+(y1-y2)**2)**(1/2)

"
Write a function to return the area of a square,"def cal_area_square(side):
    return side**2

"
Write a function to return the perimeter of a rectangle,"def cal_perimeter_rect(length, bredth):
    return 2*(length+bredth)

"
Write a function to return the perimeter of an equilateral triangle,"def cal_perimeter_eq_triangle(a):
    return 3*a

"
Write a function to return the curved surface area of a cone,"def cal_cone_curved_surf_area(slant_height,radius):
    pi=3.14
    return pi*radius*slant_height

"
Write a function to return the total surface area of a cube of side a,"def cal_surface_area_cube(a):
    return 6*(a**2)

"
Write a function to calculate the focal length of a lense buy the distance of object and distance of image from lense,"def cal_focal_length_of_lense(u:float,v:float)->float:
    return (u*v)/(u+v)

"
Write a function to calculate the gravitational force between two objects of mass m1 and m2 and distance of r between them,"def cal_gforce(mass1:float,mass2:float, distance:float)->float:
    g = 6.674*(10)**(-11)
    return (g*mass1*mass2)/(distance**2)

"
Write a function to calculate the total capacitance of capacitors in parallel in a given list,"def cal_total_cap_in_parallel(cap_list:list)->float:
    return sum(cap_list)

"
Write a function to calculate the total resistance of resistances in series in a given list,"def cal_total_res_in_series(res_list:list)->float:
    return sum(res_list)

"
Write a function to calculate the moment of inertia of a ring of mass M and radius R,"def cal_mi_ring(mass:float,radius:float)->float:
    return mass*(radius**2)

"
"Write a function to calculate the pressure P of ideal gas based on ideal gas equation - Volume V, and Temperatue T are given","def find_pressure_of_ideal_gas(volume:float, temp:float,n:float)->float:
    r = 8.3145 # gas constant R
    return (n*r*temp)/volume

"
"Write a function to calculate the simple interest for principal p, rate r and time in years y","def get_si(p:float, r:float, t:float)->float:
    return (p*r*t)/100

"
rite a function to implement stooge sort,"def stoogesort(arr, l, h):
    if l >= h:
        return
    if arr[l] > arr[h]:
        t = arr[l]
        arr[l] = arr[h]
        arr[h] = t
    if h - l + 1 > 2:
        t = (int)((h - l + 1) / 3)
        stoogesort(arr, l, (h - t))
        stoogesort(arr, l + t, (h))
        stoogesort(arr, l, (h - t))

arr = [2, 4, 5, 3, 1]
n = len(arr)
stoogesort(arr, 0, n - 1)
for i in range(0, n):
    print(arr[i], end = '')

"
write a python function to that performs as ReLU,"
def ReLU(num):
    if num > 0:
        return num
    return 0

"
write a boolean python function to check if a given string matches a given pattern,"
import re

def match(pattern, string):
    if re.match(pattern, string):
        return True
    return False

"
write a python function to get the maximum element in a list,"
def max(list):
    return max(list)

"
write a program to terminate the program execution,"
import sys
sys.exit()

"
write a python program to trim whitespace characters from a string and print it,"
string = ' asdga \t\r'
print(string.strip())

"
write a python program to typecast an integer to string and print it,"
x = 2
y = str(x)
print(y)

"
write a python program to round up a number and print it,"
import math
x = 2.3
y = math.ceil(x)
print(y)

"
write a python function to return the number of whitespace separated tokens,"def tokenise(string):
    return len(string.split())

"
write a python function to return the cube of a number,"def cube(num):
    return num * num * num

"
write a python function to calculate age given date of birth,"from datetime import date 
def calculateAge(birthDate): 
    today = date.today() 
    age = today.year - birthDate.year - ((today.month, today.day) < (birthDate.month, birthDate.day)) 
    return age

"
write a function to calculate the frequency of a number in a list,"
def frequency(list, num):
    count = 0
    for item in list:
        if item == num:
            count = count + 1
    return count

"
Write a program to print the union of two sets,"
Set1 = {""1"",""2"",""3""}
Set2 = {""a"",""b"",""c""}
Set = Set1.union(Set2)

print(Set)

"
write a program to print logrithmic values of any number,"
import math
x = 100
base = 5
print(math.log(x,base))

"
write a function to replace vowels with a specific character K,"
def replacewith_K(test_str, K): 

    vowels = 'AEIOUaeiou'
    for ele in vowels: 
        test_str = test_str.replace(ele, K) 

    return test_str

"
write a program to convert key-values list to flat dictionary and print it,"
from itertools import product 
test_dict = {'month' : [1, 2, 3], 
             'name' : ['Jan', 'Feb', 'March']} 

print(""The original dictionary is : "" + str(test_dict)) 

res = dict(zip(test_dict['month'], test_dict['name'])) 

print(""Flattened dictionary : "" + str(res))

"
write a function to calculate the sum of digits of a number,"
def sum_of_digits(num):
    sum = 0
    while(num > 0):
        sum += num % 10
        num = num // 10
    return sum

"
write a program to print the bitwise OR of two numbers,"
num1 = 5
num2 = 10
print(num1 | num2)

"
write a python function to return count of number of vowels in a sentence,"def count_vowels(sentence):
    count = 0
    for letter in sentence:
        if letter in ""aeiouAEIOU"":
            count += 1
    return count

"
write a python function to check if a given string is a palindrome,"def is_palindrome(string):
    return string == string[::-1]

"
write a function to return the square of first N numbers,"def get_squares(n):
    return [i*i for i in range(n)]

"
write a python function that inverts the key and values in a dict and returns it,"def invert_dict(dictionary):
    inverted_dict = {value: key for key, value in dictionary.items()}
    return inverted_dict

"
write a python program to print the difference in days between two dates,"from datetime import date
date1 = date(2020, 10, 25)
date2 = date(2020, 12, 25)
print(f'Difference between dates: {(date2 - date1).days}')

"
write a python function to remove all punctuation from a string,"def remove_punctuations(sentence):
    punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
    no_punct = ''
    for char in sentence:
        if char not in punctuations:
            no_punct = no_punct + char
    return no_punct

"
write a python function to return the nth fibonacci number,"def fib(n):
    if n <= 1:
        return n
    else:
        return (fib(n-1) + fib(n-2))

"
write a python program to print the character of an ASCII value,"value = 65
print(f'The ASCII value {value} is of the character {chr(value)}')

"
write a python function to print the octal value of a decimal number,"def print_octal(dec):
    print(oct(dec))

"
write a python function to print the hexadecimal value of a decimal number,"def print_hexadecimal(dec):
    print(hex(dec))

"
write a python program to print the number of letters and digits in sentence,"sentence = 'The Quick 123 Fox'
digits = 0
letters = 0
for c in sentence:
    if c.isdigit():
        digits += 1
    elif c.isalpha():
        letters += 1
    else:
        pass
print(f'Digits: {digits}, Letters: {letters}')

"
write a python program that creates a dictionary whose keys are numbers from 1 to 10 and values are squares of the key,"square_dict = {}
for i in range(1, 11):
    square_dict[i] = i*i

"
write a python program that converts a hexadecimal number to hexadecimal and prints it,"hexadecimal_num = 'FF'
decimal_num = int(hexadecimal_num, 16)
print(decimal_num)

"
write a python program that prints the area of a circle,"import math
radius = 5
print(f'Area: {math.pi * radius * radius}')

"
write a program that multiplies corresponding elements in two lists and prints a new list,"list1 = [1, 2, 3, 4, 5]
list2 = [5, 4, 3, 2, 1]
prod_list = [a*b for (a,b) in zip(list1, list2)]
print(prod_list)

"
write a python program that creates a dictionary whose keys are numbers from 1 to 10 and values are cubes of the key,"cube_dict = {}
for i in range(1, 11):
    cube_dict[i] = i ** 3

"
write a python program that prints the circumference of a circle,"import math
radius = 10
print(f'Area: {2 * math.pi * radius}')

"
write a python program to keep words less than a specified length in a sentence,"sentence = 'this is my sentence and i will write it my way'
maxlength = 3
result = [word for word in sentence.split(' ') if len(word) <= minlength]

"
Write a function that adds 2 iterables a and b such that a is even and b is odd,"def add_even_odd_list(l1:list,l2:list)-> list:
    return [a+b for a,b in zip(l1,l2) if a%2==0 and b%2!=0]

"
Write a function that generates Factorial of number,"def factorial(n):
    if n == 0 or n ==1:
        return 1
    else:
        return n*factorial(n-1)

"
Write a function to append two lists,"
def append_lists(l1:list, l2:list)->list:
    return l1.extend(l2)

"
Write a function to adds two lists element wise,"def adds_listelements(l1:list, l2:list):
    return [i+j for i, j in zip(l1,l2)]

"
Write a function that returns sine value of the input,"def sin(x:float) -> float:
    import math
    return math.sin(x)

"
Write a function that returns the exponential value of the input,"def exp(x) -> float:
    import math
    return math.exp(x)

"
Write a function that returns derivative of log of a function,"def derivative_log(x:float)->float:
    return (1/x)

"
Write a function that returns runs a garbage collector,"def clear_memory():
    import gc
    gc.collect()

"
Write a function to identify to count no of instances of a value  inside a dictionary,"def count_value(d:dict, value)->bool:
    return list(v == value for v in dict.values()).count(True)

"
Write a function that returns lowercase string,"def str_lowercase(s:str):
    return s.lower()

"
Write a function that returns a dictionary sorted ascending by its values,"def ascending_dict_valuesort(d:dict):
    return {key: val for key, val in sorted(d.items(), key = lambda ele: ele[1])}

"
Write a function that returns a dictionary sorted ascending by its keys,"def ascending_dict_keysort(d:dict):
    return {key: val for key, val in sorted(d.items(), key = lambda ele: ele[0])}

"
Write a function that returns sum of all odd elements in the list,"def sum_odd_elements(l:list):
    return sum([i for i in l if i%2==1])

"
rite a function to get list of profanity words from Google profanity URL,"def profanitytextfile():
    url = ""https://github.com/RobertJGabriel/Google-profanity-words/blob/master/list.txt""
    html = urlopen(url).read()
    soup = BeautifulSoup(html, features=""html.parser"")

    textlist = []
    table = soup.find('table')
    trs = table.find_all('tr')
    for tr in trs:
        tds = tr.find_all('td')
        for td in tds:
            textlist.append(td.text)
    return textlist

"
write a python function to collect data into fixed-length chunks or blocks,"def grouper(iterable, n, fillvalue=None):
    from itertools import zip_longest
    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx""
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)

"
"write a python function to list all unique elements, preserving order","def unique_everseen(iterable, key=None):
    from itertools import filterfalse
    # unique_everseen('AAAABBBCCDAABBB') --> A B C D
    # unique_everseen('ABBCcAD', str.lower) --> A B C D
    seen = set()
    seen_add = seen.add
    if key is None:
        for element in filterfalse(seen.__contains__, iterable):
            seen_add(element)
            yield element
    else:
        for element in iterable:
            k = key(element)
            if k not in seen:
                seen_add(k)
                yield element

"
write a python function to check if a given string is symmetrical,"
def symmetry(a): 

    n = len(a) 
    flag = 0

    if n%2: 
        mid = n//2 +1
    else: 
        mid = n//2

    start1 = 0
    start2 = mid 

    while(start1 < mid and start2 < n): 

        if (a[start1]== a[start2]): 
            start1 = start1 + 1
            start2 = start2 + 1
        else: 
            flag = 1
            break

    return flag

"
write a function to reverse words of string,"
def rev_sentence(sentence):  

    words = sentence.split(' ')  

    reverse_sentence = ' '.join(reversed(words))  

    return reverse_sentence 

"
write a function to find all urls in a given string,"
import re 

def find_urls(string): 

    regex = r""(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\"".,<>?Â«Â»â€œâ€â€˜â€™]))""
    url = re.findall(regex,string)       
    return [x[0] for x in url] 

"
write a function to find common words from two strings,"
def commonWords(str1, str2): 

    count = {} 

    for word in str1.split(): 
        count[word] = count.get(word, 0) + 1

    for word in str2.split(): 
        count[word] = count.get(word, 0) + 1

    return [word for word in count if count[word] > 1]

"
write a program to count characters surrounding vowels,"
str1 = 'week after week the numbers are increasing'

res = 0
vow_list = ['a', 'e', 'i', 'o', 'u']

for idx in range(1, len(str1) - 1): 

    if str1[idx] not in vow_list and (str1[idx - 1] in vow_list or str1[idx + 1] in vow_list): 
        res += 1

if str1[0] not in vow_list and str1[1] in vow_list: 
    res += 1

if str1[-1] not in vow_list and str1[-2] in vow_list: 
    res += 1

print(""Characters around vowels count : "" + str(res))

"
write a program to extract string of N size and having K distict characters,"
str1 = 'GoodisalwaysGoood'

N = 3

K = 2

res = [] 

for idx in range(0, len(str1) - N + 1): 

    if (len(set(str1[idx: idx + N])) == K): 
        res.append(str1[idx: idx + N]) 

print(""Extracted Strings : "" + str(res)) 

"
write a funtion that accepts two lists of equal length and converts them into a dictioinary,"def list_to_dict(list1, list2):
    return dict(zip(list1, list2))

"
write a function that inverts a dictionary with non-unique values. Keys that map to the same values should be appended to a list in the inverted dictionary,"def invert_dict_non_unique(my_dict):
    my_inverted_dict = dict()
    for key, value in my_dict.items():
        my_inverted_dict.setdefault(value, list()).append(key)
    return my_inverted_dict

"
write a program to convert a list of dictionary to list of tuples and print it.,"ini_list = [{'a':[1, 2, 3], 'b':[4, 5, 6]}, 
            {'c':[7, 8, 9], 'd':[10, 11, 12]}] 
temp_dict = {} 
result = [] 
for ini_dict in ini_list: 
    for key in ini_dict.keys(): 
        if key in temp_dict: 
            temp_dict[key] += ini_dict[key] 
        else: 
            temp_dict[key] = ini_dict[key]   
for key in temp_dict.keys(): 
    result.append(tuple([key] + temp_dict[key])) 
print(""Resultant list of tuples: {}"".format(result))

"
write a program to sort a nested dictionary by a key and print the sorted dictionary,"test_dict = {'Nikhil' : { 'roll' : 24, 'marks' : 17}, 
             'Akshat' : {'roll' : 54, 'marks' : 12},  
             'Akash' : { 'roll' : 12, 'marks' : 15}} 
sort_key = 'marks'
res = sorted(test_dict.items(), key = lambda x: x[1][sort_key]) 
print(""The sorted dictionary by marks is : "" + str(res))

"
write a python function to return a flattened dictionary from a nested dictionary input,"def flatten_dict(dd, separator ='_', prefix =''): 
    flattened =  { prefix + separator + k if prefix else k : v 
             for kk, vv in dd.items() 
             for k, v in flatten_dict(vv, separator, kk).items() 
             } if isinstance(dd, dict) else { prefix : dd } 
    return flattened

"
write a program to concatenate values with same keys in a list of dictionaries. Print the combined dictionary.,"test_list = [{'tsai' : [1, 5, 6, 7], 'good' : [9, 6, 2, 10], 'CS' : [4, 5, 6]}, 
             {'tsai' : [5, 6, 7, 8], 'CS' : [5, 7, 10]}, 
             {'tsai' : [7, 5], 'best' : [5, 7]}] 
res = dict() 
for inner_dict in test_list: 
    for inner_list in inner_dict: 
        if inner_list in res: 
            res[inner_list] += (inner_dict[inner_list]) 
        else: 
            res[inner_list] = inner_dict[inner_list]  
print(""The concatenated dictionary : "" + str(res))

"
write a program to convert date to timestamp and print the result,"import time 
import datetime 
str1 = ""20/01/2020""
element = datetime.datetime.strptime(str1,""%d/%m/%Y"") 
timestamp = datetime.datetime.timestamp(element) 
print(timestamp)

"
write a python program to add an element to a list. Print the final list.,"lst = [""Jon"", ""Kelly"", ""Jessa""]
lst.append(""Scott"")
print(lst)

"
write a python function to add elements of two lists,"def add_two_lists(list1, list2):
    list1 = [1, 2, 3]
    list2 = [4, 5, 6]
    sum_list = []

    for (item1, item2) in zip(list1, list2):
        sum_list.append(item1+item2)
    return sum_list

"
Write a python function to get the Cumulative sum of a list,"def Cumulative(lists): 
    cu_list = [] 
    length = len(lists) 
    cu_list = [sum(lists[0:x:1]) for x in range(0, length+1)] 
    return cu_list[1:]

    # Write a python program to print if a string ""hello"" is present in the list
l = [1, 2.0, 'hello','have', 'a', 'good', 'day'] 

s = 'hello'  

if s in l: 
    print(f'{s} is present in the list') 
else: 
    print(f'{s} is not present in the list') 

"
Write a python program to print odd numbers in a List,"
list1 = [10, 21, 4, 45, 66, 93, 11]  

odd_nos = list(filter(lambda x: (x % 2 != 0), list1)) 

print(""Odd numbers in the list: "", odd_nos)

"
Write a python program to find the sum and average of the list. Print the sum and average,"
L = [4, 5, 1, 2, 9, 7, 10, 8] 

count = 0

for i in L: 
    count += i 

avg = count/len(L) 

print(""sum = "", count) 
print(""average = "", avg)

"
Write a python program to print all pair combinations of 2 tuples.,"
test_tuple1 = (4, 5) 
test_tuple2 = (7, 8) 

res =  [(a, b) for a in test_tuple1 for b in test_tuple2] 
res = res +  [(a, b) for a in test_tuple2 for b in test_tuple1] 

print(""The filtered tuple : "" + str(res))

"
Write a python program to join Tuples from a list of tupels if they have similar initial element. Print out the output,"
test_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] 
print(""The original list is : "" + str(test_list)) 

res = [] 
for sub in test_list:                                            
    if res and res[-1][0] == sub[0]:               
        res[-1].extend(sub[1:])                         
    else: 
        res.append([ele for ele in sub])      
res = list(map(tuple, res)) 

print(""The extracted elements : "" + str(res))

"
Write a python program to print the uncommon elements in List,"
test_list1 = [ [1, 2], [3, 4], [5, 6] ] 
test_list2 = [ [3, 4], [5, 7], [1, 2] ] 

res_list = [] 
for i in test_list1: 
    if i not in test_list2: 
        res_list.append(i) 
for i in test_list2: 
    if i not in test_list1: 
        res_list.append(i) 

print (""The uncommon of two lists is : "" + str(res_list))

"
write a Function to convert the time from 12 hour format to 24 hour format,"def convert24(str1): 

    if str1[-2:] == ""AM"" and str1[:2] == ""12"": 
        return ""00"" + str1[2:-2] 

    elif str1[-2:] == ""AM"": 
        return str1[:-2] 

    elif str1[-2:] == ""PM"" and str1[:2] == ""12"": 
        return str1[:-2] 

    else: 

        return str(int(str1[:2]) + 12) + str1[2:8]

"
In[78]:,"
"
write a python function to read a text file and return the result,"def read_file(filepath='test.txt'):
    with open(filepath, 'r') as file_reader:
        f_read = file_reader.read()
    return f_read
read_file()

"
In[83]:,"
"
write a python function to check if the given structure is a instance of list or dictionary,"def check_insst(obj):
    if isinstance(obj, list):
        return ""list""
    elif isinstance(obj, dict):
        return ""dict""
    else:
        return ""unknown""

check_insst({})

"
"write a python function that call another function and that function prints ""Inside B""","def A():
    B()

def B():
    print(""Inside B"")

A()

"
write a python function that removes all the vowels from the given list of strings and return the list,"def myfunc(listitems):
    final=[]
    for strchar in listitems:
        for letters in strchar:
            if letters in ('a','e','i','o','u', 'A','E','I','O','U'):
                strchar = strchar.replace(letters,"""")            
        final.append(strchar) 
    return final

myfunc([""rohan"", ""END""])

"
In[43]:,"
"
In[45]:,"
"
In[56]:,"
"
write a python function to add all even numbers between minimum and maximum value,"def add_even_num(min, max):
    return sum([i for i in range(min, max) if i%2==0])

add_even_num(1, 6)

"
In[123]:,"
"
In[129]:,"
"
write a python program to merge two sorted lists,"a = [3, 4, 6, 10, 11, 18]
b = [1, 5, 7, 12, 13, 19, 21]

a.extend(b)
c = sorted(a)
print(f""{c}"")

"
In[140]:,"
"
In[143]:,"
"
write a python function which uses generator to sum all the numbers in a range,"min_value = 10
max_value = 10000
sum_all = sum(i * i for i in range(min_value, max_value))
print(f""{sum_all}"")

"
write a python function to create two threads and start and join the two threads,"import threading 

def print_cube(num): 
    print(""Cube: {}"".format(num * num * num)) 

t1 = threading.Thread(target=print_cube, args=(10,)) 
t2 = threading.Thread(target=print_cube, args=(10,)) 

t1.start() 

t2.start() 

t1.join()
t2.join()

"
Write a python class to welcome,"
class Welcome(object):

        # Constructor
    def __init__(self, name):
        self.name = name  # Create an instance variable

    # Instance method
    def welcome(self, up=False):
        if up:
            print('Hi, %s!' % self.name.upper())
        else:
            print('Hey, %s' % self.name)

w = Welcome('Geeta')           
w.welcome(up=True)

"
3. Write a program to reverse dictionary key order,"
sample_dict = {1:'Hi',2:'Hello',3:'Hey'}

print(""The original dictionary : "" + str(sample_dict)) 

res = dict(reversed(list(sample_dict.items()))) 

print(""The reversed order dictionary : "" + str(res))

"
first two terms,"n1, n2 = 0, 1
count = 0
fab_list = []
"
Write a python function to add 2 iterables a and b such that a is even and b is odd,"
n=10
a = []
b = []
_ = [a.append(i) if i%2==0 else b.append(i) for i in range(n)]

def add(a,b):
    return [a+b for a,b in (zip(a,b))]

add(a,b)

"
Write a python function that takes a small character string and shifts all characters by 5,"
def shift_n_letters(letter, n):
    return chr((ord(letter) - 97 + n % 26) % 26 + 97) if ord(letter)>=97 else chr((ord(letter) - 65 + n % 26) % 26 + 65)

name = ""hello""

res="""".join([shift_n_letters(x,5) for x in name])

print('Resulting string',res)

"
Write python function role a dice,"
import random
min = 1
max = 6

roll_again = ""yes""

while roll_again == ""yes"" or roll_again == ""y"":
    print(""Rolling the dices..."")
    print(""The values are...."")
    print(random.randint(min, max))
    print(random.randint(min, max))

    roll_again = input(""Roll the dices again?"")

"
Write a program to take an average of given scores,"s1=50
s2=77
s3=87

print('Avg score is',(s1+s2+s3)/3)

"
Write a program to concatinate two strings,"
"
Python String Operations,"str1 = 'Good'
str2 ='Morning!'

"
Write a program to replace a string by a given string #in a sentence,"
string = 'This is beautiful picture'

string.replace('beautiful','good')

"
write a python function to sort a list of tuples by the second Item,"
def Sort_Tuple(tup):  

    # getting length of list of tuples 
    lst = len(tup)  
    for i in range(0, lst):  

        for j in range(0, lst-i-1):  
            if (tup[j][1] > tup[j + 1][1]):  
                temp = tup[j]  
                tup[j]= tup[j + 1]  
                tup[j + 1]= temp  
    return tup  

"
"write program to Compare two dictionaries and check how many (key, value) pairs are equal","x = {""a"":2,""b"":2,""c"":3,""d"":4}
y = {""b"":2,""c"":3, ""d"":4}
shared_items = {k: x[k] for k in x if k in y and x[k] == y[k]}
length = len(shared_items)
print(f'count:{length}')

"
write a python function get the random number from the given range and square the number,"import random 

min_value = 10
max_value = 20

def square(x):
    return x*x

def get_square_of_random_number(min_value,max_value):
    return square(random.randint(min_value,max_value))

get_square_of_random_number(min_value,max_value)

"
"write a program that prints the sum and average of the digits that appear in the string, ignoring all other characters","import re

inputStr = ""English = 78 Science = 83 Math = 68 History = 65""
markList = [int(num) for num in re.findall(r'\b\d+\b', inputStr)]
totalMarks = 0
for mark in markList:
    totalMarks+=mark

percentage = totalMarks/len(markList)  
print(f'Total Marks is:{totalMarks},Percentage is:{percentage}')

"
write a progarm to adds every 3rd number in a list,"from functools import reduce
input_list = [x for x in range(10)]
reduce((lambda x, y: x + y), [val for idx, val in enumerate(input_list) if (idx+1)%3==0])

"
"Given a collection of intervals which are already sorted by start number, merge all overlapping intervals.","org_intervals = [[1,3],[2,6],[5,10],[11,16],[15,18],[19,22]]
i = 0
while i < len(org_intervals)-1:
    if org_intervals[i+1][0] < org_intervals[i][1]:
        org_intervals[i][1]=org_intervals[i+1][1]
        del org_intervals[i+1]
        i = i - 1
    i = i + 1
print(org_intervals)

"
write a program to multiply two Matrix,"X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]
Y = [[5,8,1,2],
    [6,7,3,0],
    [4,5,9,1]]
result = [[0,0,0,0],
         [0,0,0,0],
         [0,0,0,0]]

for i in range(len(X)):
    for j in range(len(Y[0])):
        for k in range(len(Y)):
            result[i][j] += X[i][k] * Y[k][j]
print(f""Final Result is{result}"")

"
Sort the list in descending order,"my_list = [4,3,2,9,10,44,1]
my_list.sort(reverse=True)
print(f""Descending Order list:,{my_list}"")

"
Concatenation of two List,"my_list1 = [4,3,2,9,10,44,1]
my_list2 = [5,6,2,8,15,14,12]
print(f""Sum of two list:,{my_list1+my_list2}"")

"
access Last characters in a string,"word = ""Hello World""
letter=word[-1]
print(f""First Charecter in String:{letter}"")

"
Calculate the length of dictionary,"thisdict = {
    ""brand"": ""Ford"",
    ""model"": ""Mustang"",
    ""year"": 1964
}

print(f""Length of Dictionary:{len(thisdict)}"")

"
Calculate length of a string,"word = ""Hello World""
print(f""Length of string: {len(word)}"")

"
emoves trailing characters,"word = "" xyz ""
rstrip = word.rstrip()
print(f""String ater removal of trailing characters:{rstrip}"")

"
"Write a program which will achieve given a Python list, remove all occurrence of an input from the list","list1 = [5, 20, 15, 20, 25, 50, 20]

def removeValue(sampleList, val):
    return [value for value in sampleList if value != val]

resList = removeValue(list1, 20)
print(resList)

"
"Given an input string, count occurrences of all characters within a string","str1 = ""Apple""
countDict = dict()
for char in str1:
    count = str1.count(char)
    countDict[char]=count
print(countDict)

"
Removal all the characters other than integers from string,"str1 = 'I am 25 years and 10 months old'
res = """".join([item for item in str1 if item.isdigit()])
print(res)

"
Given a two list of equal size create a set such that it shows the element from both lists in the pair,"firstList = [2, 3, 4, 5, 6, 7, 8]
secondList = [4, 9, 16, 25, 36, 49, 64]
result = zip(firstList, secondList)
resultSet = set(result)
print(resultSet)

"
Write a recursive function to calculate the sum of numbers from 0 to 10,"def calculateSum(num):
    if num:
        return num + calculateSum(num-1)
    else:
        return 0
res = calculateSum(10)
print(res)

"
Shuffle a list randomly,"import random
list = [2,5,8,9,12]
random.shuffle(list)
print (""Printing shuffled list "", list)

"
Choose given number of elements from the list with different probability,"import random
num1 =5
numberList = [111, 222, 333, 444, 555]
print(random.choices(numberList, weights=(10, 20, 30, 40, 50), k=num1))

"
write a python function to check if a given string is a palindrome,"
def isPalindrome(s):
    return s == s[::-1]

"
write a program to check if a substring is present in a given string,"
string = ""how are you?""
substring = ""are""
if (string.find(substring) == -1): 
    print(""NO"") 
else: 
    print(""YES"")  

"
write a program to print length of a string,"
str1 = ""great way to learn!""
print(len(str1))

"
write a program to print count of number of unique matching characters in a pair of strings,"
str1=""ababccd12@""
str2=""bb123cca1@""

matched_chars = set(str1) & set(str2) 
print(""No. of matching characters are : "" + str(len(matched_chars)) )

"
write a function to find common words from two strings,"
def commonWords(str1, str2): 

    count = {} 

    for word in str1.split(): 
        count[word] = count.get(word, 0) + 1

    for word in str2.split(): 
        count[word] = count.get(word, 0) + 1

    return [word for word in count if count[word] > 1]

"
write a program to replace multiple words with a single word,"
str1 = 'CoffeeDay is best for coffee and having long conversations'

word_list = [""best"", 'long'] 

repl_word = 'good'

res = ' '.join([repl_word if idx in word_list else idx for idx in str1.split()]) 

print(""String after multiple replace : "" + str(res))

"
write a function to rotate string right by a given length,"
def rotate_right(input,d):  

    Rfirst = input[0 : len(input)-d]  
    Rsecond = input[len(input)-d : ]  
    return (Rsecond + Rfirst) 

"
write a program to break up string into individual elements,"
str1 = ""whatisthis""

split_string = list(''.join(str1)) 

print(split_string) 

"
"write a program that iterates over a dictionary and prints ""Bingo!"" if length of value is greater than the length of key. Otherwise print ""no bingo""","key_val_map = {""key1"": ""length1"", ""key2"": ""len2"", ""Hello"": ""hi"", ""bingo"": ""print bingo""}
for key, val in key_val_map.items():
    if len(val) > len(key):
        print(""Bingo!"")
    else:
        print(""no bingo"")

"
write a function that inverts a dictionary with non-unique values. Keys that map to the same values should be appended to a list in the inverted dictionary,"def invert_dict_non_unique(my_dict):
    my_inverted_dict = dict()
    for key, value in my_dict.items():
        my_inverted_dict.setdefault(value, list()).append(key)
    return my_inverted_dict

"
write a program to merge a list of dictionaries into a single dictionary using dictionary comprehension,"input = [{""foo"": ""bar"", ""Hello"": ""World""},
         {""key1"": ""val1"", ""key2"": ""val2""},
         {""sample_key"": ""sample_val""}]
merged_dict = {key: value for d in input for key, value in d.items()}

"
write a python function to combine three lists of equal lengths into a nested dictionary and return it,"def lists_to_dict(test_list1, test_list2, test_list3):
    res = [{a: {b: c}} for (a, b, c) in zip(test_list1, test_list2, test_list3)] 
    return res

"
write a function that converts a integer dictionary into a list of tuples.,"def dict_to_tuple(input_dict):
    out_tuple = [(a, b) for a,b in input_dict.items()]
    return out_tuple

"
Write a python program to print positive Numbers in a List,"
list1 = [11, -21, 0, 45, 66, -93] 

for num in list1: 

    if num >= 0: 
        print(num, end = "" "") 

"
Write a python program to remove 11 and 18 from a list. Print the final list.,"
list1 = [11, 5, 17, 18, 23, 50]  

unwanted_num = {11, 18} 

list1 = [ele for ele in list1 if ele not in unwanted_num] 

print(""New list after removing unwanted numbers: "", list1)

"
Write a python fuction to create an empty list,"
def emptylist():
    return list()  

"
Write a python program for printing number of unique elements in a list,"input_list = [1, 2, 2, 5, 8, 4, 4, 8] 

l1 = [] 

count = 0

for item in input_list: 
    if item not in l1: 
        count += 1
        l1.append(item) 

print(""No of unique items are:"", count) 

"
write a Function to convert the time from 12 hour format to 24 hour format,"def convert24(str1): 

    if str1[-2:] == ""AM"" and str1[:2] == ""12"": 
        return ""00"" + str1[2:-2] 

    elif str1[-2:] == ""AM"": 
        return str1[:-2] 

    elif str1[-2:] == ""PM"" and str1[:2] == ""12"": 
        return str1[:-2] 

    else: 

        return str(int(str1[:2]) + 12) + str1[2:8]

"
write a python function that would read the given input file path and print its contents,"def read_and_print_file(filepath):
    with open(filepath, ""r"") as infile:
        print( infile.read() )

"
"write a python function that would filter a list of dictionaries where a specified key equals given value, list_of_dictionaries, key and value are inputs to this function.","def filter_with_key_value(list_of_dicts, key, value):
    return list( filter( lambda x: x.get(key) == value, list_of_dicts ) )

"
write a python function that returns the square of a given input number,"def square(x):
    return x**2

"
write a python program that would swap variable values,"a = 10
b = 15
a, b = b, a

"
write a python function that would print the ASCII value of a given character,"def print_ascii(char):
    print(ord(char))

"
write a python program that prints out natural numbers less than or equal to the given number using a while loop,"input_num = 27
while input_num:
    print(input_num)
    input_num -= 1

"
Write a function to return the area of triangle by heros formula,"def cal_triangle_area(a:float,b:float,c:float)->float:
    if a or b or c:
        s = (a+b+c)/2
        if s>a and s>b and s>c:
            area = (s*(s-a)*(s-b)*(s-c))**(1/2)
            return round(area,2)
        else:
            return None
    return None

"
Write a function to return the area of a equilateral triangle,"def cal_eq_triangle_area(a:float)->float:
    if a:
        return (3**(1/2))*(a**2)/4
    else:
        return None

"
Write a function to return the area of a right angle triangle,"
def cal_rt_triangle_area(base:float,height:float)->float:
    if base and height:
        return (base*height)/2
    else:
        return None

"
Write a function to return the perimeter of a triangle,"def cal_perimeter_triangle(s1,s2,s3):
    return s1+s2+s3

"
Write a function to return the total surface area of a cylinder,"def cal_cylinder_surf_area(height,radius):
    pi=3.14
    return 2*pi*radius**2*+2*pi*radius*height

"
Write a function to return the volume of a cylinder,"def cal_cylinder_volume(height, radius):
    pi=3.14
    return pi*(radius**2)*height

"
Write a function to calculate the gravitational force between two objects of mass m1 and m2 and distance of r between them,"def cal_gforce(mass1:float,mass2:float, distance:float)->float:
    g = 6.674*(10)**(-11)
    return (g*mass1*mass2)/(distance**2)

"
Write a function to calculate the current in the curcit where the resistance is R and voltage is V,"def cal_current(resistance:float, voltage:float)->float:
    return voltage/resistance

"
Write a function to calculate the total resistance of resistances in parallel in a given list,"def cal_total_res_in_parallel(res_list:list)->float:
    return sum([1/r for r in res_list])

"
"Write a function to calculate the velocity of an object with initial velocity u, time t and acceleration a","def cal_final_velocity(initial_velocity:float,accelration:float,time:float)->float:
    return initial_velocity + accelration*time

"
"Write a function to calculate the compound interest for principal p, rate r and time in years y","def get_ci(p:float, r:float, t:float, n:float)->float:
    return round(p*((1+(r/(n*100)))**(n*t)) - p,2)

"
Write a function to calculate the energy released by converting mass m in kg to energy,"def cal_energy_by_mass(mass:float)->float:
    c = 300000
    return mass * (c**2)

"
Write a function to print all possible subarrays using recursion,"def printSubArrays(arr, start, end):
    if end == len(arr):
        return
    elif start > end:
        return printSubArrays(arr, 0, end + 1)
    else:
        print(arr[start:end + 1])
        return printSubArrays(arr, start + 1, end)

arr = [1, 2, 3]
printSubArrays(arr, 0, 0)

"
Write a function to implement Pigeonhole Sort */,"def pigeonhole_sort(a):
    my_min = min(a)
    my_max = max(a)
    size = my_max - my_min + 1
    holes = [0] * size
    for x in a:
        assert type(x) is int, ""integers only please""
        holes[x - my_min] += 1
    i = 0
    for count in range(size):
        while holes[count] > 0:
            holes[count] -= 1
            a[i] = count + my_min
            i += 1
a = [8, 3, 2, 7, 4, 6, 8]
print(""Sorted order is : "", end="" "")
pigeonhole_sort(a)
for i in range(0, len(a)):
    print(a[i], end="" "")

"
rite a function to find the  difference between two times,"def difference(h1, m1, h2, m2):

    t1 = h1 * 60 + m1
    t2 = h2 * 60 + m2
    if (t1 == t2):
        print(""Both are same times"")
        return
    else:
        diff = t2 - t1
    h = (int(diff / 60)) % 24
    m = diff % 60
    print(h, "":"", m)
difference(7, 20, 9, 45)
difference(15, 23, 18, 54)
difference(16, 20, 16, 20)

"
rite a function to print all time when angle between hour hand and minute,"def printTime(theta):
    for hh in range(0, 12):
        for mm in range(0, 60):
            if (calcAngle(hh, mm) == theta):
                print(hh, "":"", mm, sep="""")
                return
    print(""Input angle not valid."")
    return
theta = 90.0
printTime(theta)

"
write a python function to get symmetric difference between two sets from user.,"def symmetric_diff_sets():
    M, m = input(), set(list(map(int, input().split())))
    N, n = input(), set(list(map(int, input().split())))
    s = sorted(list(m.difference(n)) + list(n.difference(m)))
    for i in s:
        print(i)

"
Write a python Class to calculate area of a circle and print the vale for a radius,"class CircleArea:
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return math.pi * self.radius * self.radius

r = 2
obj = CircleArea(r)
print(""Area of circle:"", obj.area())

"
Write a python function to count the number of Words in a Text File,"def check_words():
    fname = input(""file name: "")
    num_words = 0
    with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            num_words += len(words)
    print(""Number of words = "", num_words)

"
write a python function to get dot product between two lists of numbers,"def dot_product(a, b):
    return sum(e[0] * e[1] for e in zip(a, b))

"
write a python function to get HTML code for a given URL,"def get_html(url=""http://www.python.org""):
    import urllib.request

    fp = urllib.request.urlopen(url)
    mybytes = fp.read()
    mystr = mybytes.decode(""utf8"")
    fp.close()
    print(mystr)

"
write a python function to get Bitcoin prices after every given 'interval' seconds,"def get_btc_price(interval=5):
    import requests
    import json
    from time import sleep

    def getBitcoinPrice():
        URL = ""https://www.bitstamp.net/api/ticker/""
        try:
            r = requests.get(URL)
            priceFloat = float(json.loads(r.text)[""last""])
            return priceFloat
        except requests.ConnectionError:
            print(""Error querying Bitstamp API"")

    while True:
        print(""Bitstamp last price: US $ "" + str(getBitcoinPrice()) + ""/BTC"")
        sleep(interval)

"
Write a python program to Check and print if string is palindrome using Stack,"
class Stack:
    def __init__(self):
        self.items = []

    def is_empty(self):
        return self.items == []

    def push(self, data):
        self.items.append(data)

    def pop(self):
        return self.items.pop()

s = Stack()
text = ""ABA""

for character in text:
    s.push(character)

reversed_text = ''
while not s.is_empty():
    reversed_text = reversed_text + s.pop()

if text == reversed_text:
    print('The string is a palindrome.')
else:
    print('The string is not a palindrome.')

"
Write a python program to Implement Linear Search and print the key element if found,"
def linear_search(alist, key):
    """"""Return index of key in alist. Return -1 if key not present.""""""
    for i in range(len(alist)):
        if alist[i] == key:
            return i
    return -1

alist = [2, 3, 5, 6, 4, 5]

key = 6

index = linear_search(alist, key)
if index < 0:
    print(f'{key} was not found.')
else:
    print(f'{key} was found at index {index}.')

"
Write a python program to Implement Binary Search without Recursion and print the key element if found,"
def binary_search(alist, key):
    """"""Search key in alist[start... end - 1].""""""
    start = 0
    end = len(alist)
    while start < end:
        mid = (start + end)//2
        if alist[mid] > key:
            end = mid
        elif alist[mid] < key:
            start = mid + 1
        else:
            return mid
    return -1

alist = [2, 3, 5, 6, 4, 5]

key = 6

index = binary_search(alist, key)
if index < 0:
    print(f'{key} was not found.')
else:
    print(f'{key} was found at index {index}.')

"
Write a python program to Implement Insertion sort and print the sorted list for the below list,"
def insertion_sort(alist):
    for i in range(1, len(alist)):
        temp = alist[i]
        j = i - 1
        while (j >= 0 and temp < alist[j]):
            alist[j + 1] = alist[j]
            j = j - 1
        alist[j + 1] = temp

alist = [2, 3, 5, 6, 4, 5]
insertion_sort(alist)
print('Sorted list: ', end='')
print(alist)

"
Write a python program to Implement Heapsort and print the sorted list for the below list,"
def heapsort(alist):
    build_max_heap(alist)
    for i in range(len(alist) - 1, 0, -1):
        alist[0], alist[i] = alist[i], alist[0]
        max_heapify(alist, index=0, size=i)

def parent(i):
    return (i - 1)//2

def left(i):
    return 2*i + 1

def right(i):
    return 2*i + 2

def build_max_heap(alist):
    length = len(alist)
    start = parent(length - 1)
    while start >= 0:
        max_heapify(alist, index=start, size=length)
        start = start - 1

def max_heapify(alist, index, size):
    l = left(index)
    r = right(index)
    if (l < size and alist[l] > alist[index]):
        largest = l
    else:
        largest = index
    if (r < size and alist[r] > alist[largest]):
        largest = r
    if (largest != index):
        alist[largest], alist[index] = alist[index], alist[largest]
        max_heapify(alist, largest, size)

alist = [2, 3, 5, 6, 4, 5]
heapsort(alist)
print('Sorted list: ', end='')
print(alist)

"
Write a python program to Implement Counting sort and print the sorted list for the below list,"
def counting_sort(alist, largest):
    c = [0]*(largest + 1)
    for i in range(len(alist)):
        c[alist[i]] = c[alist[i]] + 1

    c[0] = c[0] - 1 
    for i in range(1, largest + 1):
        c[i] = c[i] + c[i - 1]

    result = [None]*len(alist)

    for x in reversed(alist):
        result[c[x]] = x
        c[x] = c[x] - 1

    return result

alist = [2, 3, 5, 6, 4, 5]
k = max(alist)
sorted_list = counting_sort(alist, k)
print('Sorted list: ', end='')
print(sorted_list)

"
Write a python program to Implement Radix sort and print the sorted list for the below list,"
def radix_sort(alist, base=10):
    if alist == []:
        return

    def key_factory(digit, base):
        def key(alist, index):
            return ((alist[index]//(base**digit)) % base)
        return key
    largest = max(alist)
    exp = 0
    while base**exp <= largest:
        alist = counting_sort(alist, base - 1, key_factory(exp, base))
        exp = exp + 1
    return alist

def counting_sort(alist, largest, key):
    c = [0]*(largest + 1)
    for i in range(len(alist)):
        c[key(alist, i)] = c[key(alist, i)] + 1

    c[0] = c[0] - 1
    for i in range(1, largest + 1):
        c[i] = c[i] + c[i - 1]

    result = [None]*len(alist)
    for i in range(len(alist) - 1, -1, -1):
        result[c[key(alist, i)]] = alist[i]
        c[key(alist, i)] = c[key(alist, i)] - 1

    return result

alist = [2, 3, 5, 6, 4, 5]
sorted_list = radix_sort(alist)
print('Sorted list: ', end='')
print(sorted_list)

"
Write a python program to Implement Gnome sort and print the sorted list for the below list,"
def gnome_sort(alist):
    for pos in range(1, len(alist)):
        while (pos != 0 and alist[pos] < alist[pos - 1]):
            alist[pos], alist[pos - 1] = alist[pos - 1], alist[pos]
            pos = pos - 1

alist = [2, 3, 5, 6, 4, 5]
gnome_sort(alist)
print('Sorted list: ', end='')
print(alist)

"
Write a python program to Implement Cocktail Shaker sort and print the sorted list for the below list,"
def cocktail_shaker_sort(alist):
    def swap(i, j):
        alist[i], alist[j] = alist[j], alist[i]

    upper = len(alist) - 1
    lower = 0

    no_swap = False
    while (not no_swap and upper - lower > 1):
        no_swap = True
        for j in range(lower, upper):
            if alist[j + 1] < alist[j]:
                swap(j + 1, j)
                no_swap = False
        upper = upper - 1

        for j in range(upper, lower, -1):
            if alist[j - 1] > alist[j]:
                swap(j - 1, j)
                no_swap = False
        lower = lower + 1

alist = [2, 3, 5, 6, 4, 5]
cocktail_shaker_sort(alist)
print('Sorted list: ', end='')
print(alist)

"
Write a python Class to calculate area of a circle and print the vale for a radius,"
class CircleArea():
    def __init__(self,radius):
        self.radius=radius
    def area(self):
        return 3.14 * self.radius * self.radius
a=6
obj=CircleArea(a)
print(""Area of rectangle:"",obj.area())

"
Write a python function that Print all the Numbers Present in the Text File,"
def print_number(fname):
    with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            for i in words:
                for letter in i:
                    if(letter.isdigit()):
                        print(letter)

"
Write a Python function to Find the Power of a Number Using Recursion,"
def power(base,exp):
    if(exp==1):
        return(base)
    if(exp!=1):
        return(base*power(base,exp-1))

"
Write a Python Program to Concatenate Two Dictionaries Into One,"
def concat_dic(d1, d2):
    return d1.update(d2)

"
Write a Python Program to Map Two Lists into a Dictionary,"
def map_dict(keys, values):
    return dict(zip(keys,values))

"
Write a Python Program to Remove the Characters of Odd Index Values in a String,"
def modify(string):  
    final = """"   
    for i in range(len(string)):  
        if i % 2 == 0:  
            final = final + string[i]  
    return final

"
Write a Python Program to print Prime Factors of an Integer,"
n=24
print(""Factors are:"")
i=1
while(i<=n):
    k=0
    if(n%i==0):
        j=1
        while(j<=i):
            if(i%j==0):
                k=k+1
            j=j+1
        if(k==2):
            print(i)
    i=i+1

"
Write a Python Program to Print all Pythagorean Triplets in the Range,"
limit=10
c=0
m=2
while(c<limit):
    for n in range(1,m+1):
        a=m*m-n*n
        b=2*m*n
        c=m*m+n*n
        if(c>limit):
            break
        if(a==0 or b==0 or c==0):
            break
        print(a,b,c)
    m=m+1

"
Write a Python function that calculate interior angle of a equilateral polygon,"
def interior_angle(no_of_sides):
    return (no_of_sides - 2) * 180 / no_of_sides

"
write a python function  to convert a list of string list to a string list,"def convert_to_string_list(list_of_string_list):
    res = [''.join(str(b) for b in eval(a)) for a in list_of_string_list] 
    return res

"
write a python program to clear a list,"given_list = [6, 0, 4, 1] 
given_list.clear()

"
write a python program to sort and print a list,"given_list = [6, 0, 4, 1] 
sorted_list = sorted(given_list)
print(f'sorted list is {sorted_list}')

"
Write Python Program to print if a Number is Odd or Even,"num = 102
if (num % 2) == 0:
    print(f""{num} is Even"")
else:
    print(f""{num} is Odd"")

"
Write Python Program to Convert Celsius To Fahrenheit,"celsius = 37.5
fahrenheit = (celsius * 1.8) + 32
print('%0.1f degree Celsius is equal to %0.1f degree Fahrenheit' %(celsius,fahrenheit))

"
Write Python function to check if a string is palindrome or not,"def isPalindrome(s):
    return s == s[::-1]

"
Write a python program to reverse a string,"s = ""i like this program very much""
words = s.split(' ')
string =[]
for word in words:
    string.insert(0, word)

print(""Reversed String:"")
print("" "".join(string))

"
Write Python function to check if a string has at least one letter and one number,"def checkString(str): 
    flag_l = False
    flag_n = False
    for i in str: 
        if i.isalpha(): 
            flag_l = True
        if i.isdigit(): 
            flag_n = True
    return flag_l and flag_n 

"
Write a python function to extract odd length words in String,"def findoddlenthwords(test_str):
    res = [] 
    for ele in test_str.split(): 
        if len(ele) % 2 : 
            res.append(ele) 
    return res

"
Write a python program to print Words lengths in String,"test_string = ""India is my country""
res = list(map(len, test_string.split())) 
print (""The list of words lengths is : "" + str(res)) 

"
Write Python Program to Remove Punctuations From a String and print the cleaned string.,"punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
my_str = ""Hello!!!, he said ---and went.""
no_punct = """"
for char in my_str:
    if char not in punctuations:
        no_punct = no_punct + char
print(no_punct)   

"
Write a Python program to remove and print every third number from a list of numbers until the list becomes empty.,"num = [10,20,30,40,50,60,70,80,90]
len_list = len(num)
position = 3 - 1
idx = 0
while len_list > 0:
    idx = (idx+position) % len_list
    print(num.pop(idx))
    len_list-=1 

"
Write a Python function to compute simple interest,"def simple_interest(p,t,r): 
    si = (p * t * r)/100
    return si 

"
write a python function to convert string in to binary,"def convertstringtobinary(text):
    for chr in text:
        bin = ''
        asciiVal = int(ord(chr))
        while asciiVal > 0:
            if asciiVal % 2 == 0:
                bin = bin + '0'
            else:
                bin = bin + '1'
            asciiVal = int(asciiVal/2)
        return(bin + "" : "" + bin[::-1])

"
"Write a python function to replace all the spaces in an entered string with a hyphen ""-""","def replacetext(string):
    string = string.replace("" "", ""-"")
    return string

"
write a Python Program to check if a number is a Perfect number and print the result,"n = 7
sum1 = 0
for i in range(1, n):
    if(n % i == 0):
        sum1 = sum1 + i
if (sum1 == n):
    print(""The number is a Perfect number!"")
else:
    print(""The number is not a Perfect number!"")

"
write a Python Program to Replace all Occurrences of â€˜aâ€™ with $ in a String,"def replacestring(txt):
    return txt.replace('A','$')

"
write Python Program to print the Union of two Lists,"l1 = [11,22,33,44]
l2 = [55,66,77,88]
union = list(set().union(l1,l2)) 
print('The Union of two lists is:',union)

"
write a python function to Check if a Substring is Present in a Given String,"def checksubstring(string,sub_string):
    if(string.find(sub_str)==-1):
        return False
    else:
        return True              

"
Write a Python Program to Multiply All the Items in a Dictionary and print the result,"d={'A':10,'B':10,'C':239}
tot=1
for i in d:    
    tot=tot*d[i]
print(tot)

"
Write a Python Program to Transpose a Matrix  and print result.,"X = [[1,2],  
      [4,5],  
     [7,8]]  

Result = [[0,0,0],  
             [0,0,0]]  

for i in range(len(X)):  
    for j in range(len(X[0])):  
        result[j][i] = X[i][j]  

for r in result:  
    print(r)

"
write Python Program to Count the Number of Words in a Text File,"fname = input(""Enter file name: "")
num_words = 0
with open(fname, 'r') as f:
    for line in f:
        words = line.split()
        num_words += len(words)
print(""Number of words:"")
print(num_words)

"
write a python function to compute minimum number of rotations required to get the same string,"def findRotations(str): 
    tmp = str + str
    n = len(str)   
    for i in range(1, n + 1): 
        substring = tmp[i: i+n] 
        if (str == substring): 
            return i 
    return n 

"
write a Python function to check if count of divisors is even or odd,"def NumOfDivisor(n): 
    if n < 1: 
        return
    root_n = n**0.5
    if root_n**2 == n: 
        print(""Odd"") 
    else: 
        print(""Even"") 

"
"Write a Python function to find the number of notes (Sample of notes: 10, 20, 50, 100, 200 and 500 ) against a given amount.","def no_notes(a):
    Q = [500, 200, 100, 50, 20, 10, 5, 2, 1]
    x = 0
    for i in range(9):
        q = Q[i]
        x += int(a / q)
        a = int(a % q)
    if a > 0:
        x = -1
    return x

"
Write a Python function to return octal value of a given integer,"def int_to_oct(a):
    return oct(a)

"
Write a Python program to typecast given input to integer,"num = int(input(""Input a value: ""))
print(num)

"
"Write a Python function to find the compound interest in Python when principle amount, rate of interest and time is given","def compound_interest(p,r,t):
    ci = p * (pow((1 + r / 100), t)) 
    return ci

"
Write a Python function to check whether a given number is perfect number or not,"def perfect_number_checker(num):
    i = 2
    sum = 1
    while(i <= num//2 ) :
        if (num % i == 0) :
            sum += i
        i += 1
    if sum == num :
        return f'{num} is a perfect number'

    else :
        return f'{num} is not a perfect number'

"
Write a Python program to print the calendar of any given year,"import calendar
year=2020
print(calendar.calendar(year))

"
Write a Python program to print rank of an array/ matrix,"import numpy as np
A = np.array([[4,5,8], [7,1,4], [5,5,5], [2,3,6]])
print(""Rank of the matrix A: "", np.linalg.matrix_rank(A))

"
Write a Python function to print number with commas as thousands separators,"def formattedNumber(n):
    return (""{:,}"".format(n))

"
Write a Python program to keep only top 2 most frequent values as it is and replace everything else as â€˜Otherâ€™ in a series,"import pandas as pd
import numpy as np
np.random.RandomState(100)
ser = pd.Series(np.random.randint(1, 5, [12]))
ser[~ser.isin(ser.value_counts().index[:2])] = 'Other'
print(ser)

"
Write a Python program to  bin a numeric series to 10 groups of equal size,"import pandas as pd
import numpy as np
ser = pd.Series(np.random.random(20))
deciled = pd.qcut(ser, q=[0, .10, .20, .3, .4, .5, .6, .7, .8, .9, 1], 
        labels=['1st', '2nd', '3rd', '4th', '5th', '6th', '7th', '8th', '9th', '10th'])
print(deciled)

"
Write a Python program to Find the day of week of a given date,"from datetime import datetime
given_date = datetime(2020, 7, 26)
print(given_date.strftime('%A'))

"
Write a function that will provide the ascii value of a character,"
def charToASCII(chr):
    return f'ASCII value of {chr} is: {ord(chr)}'

"
Write a function to determine the bits used by any number,"
def totalBits(n):
    return f'total number of bits used in {n} is : {len(bin(n)[2: ])}'

"
Write a function to repeat M characters of a string N times,"
def multTimes(str, m, n):
    front_len = m
    if front_len > len(str):
        front_len = len(str)
    front = str[:front_len]
    result = ''
    for i in range(n):
        result = result + front
    return result
print (multTimes('Hello', 3, 7))

"
Write a function to remove empty list from a list using list comprehension,"def removeEmptyList(li):
    res = [ele for ele in li if ele != []] 
    return res

"
Write a function to add two positive integers without using the '+' operator,"def add_without_plus_operator(a, b):
    while b != 0:
        data = a & b
        a = a ^ b
        b = data << 1
    return a

"
Write a function to count the number of carry operations for each of a set of addition problems,"def carry_number(x, y):
    ctr = 0
    if(x == 0 and y == 0):
        return 0
    z = 0  
    for i in reversed(range(10)):
        z = x%10 + y%10 + z
        if z > 9:
            z = 1
        else:
            z = 0
        ctr += z
        x //= 10
        y //= 10
    if ctr == 0:
        return ""No carry operation.""
    elif ctr == 1:
        return ctr
    else:
        return ctr

"
Write a program to compute the number of digits in multiplication of two given integers,"a,b = 312, 410
print(len(str(a*b)))

"
"Write a function that Given a number, find the most significant bit number which is set bit and which is in power of two","def setBitNumber(n): 
    if (n == 0): 
        return 0
    msb = 0 
    n = int(n / 2) 
    while (n > 0): 
        n = int(n / 2) 
        msb += 1
    return (1 << msb) 

"
Write a function to calculate volume of Square Pyramid,"def volumeSquare(b, h): 
    return (0.33) * b * b * h 

"
Write a function to calculate Volume of Pentagonal Pyramid,"def volumePentagonal(a, b, h): 
    return (0.83) * a * b * h 

"
Write a Python program to check if all dictionaries in a list are empty or not.,"my_list = [{},{},{}]
my_list1 = [{1,2},{},{}]
print(all(not d for d in my_list))
print(all(not d for d in my_list1))

"
Write a Python program to count the number of characters (character frequency) in a string,"def char_frequency(str1):
    dict = {}
    for n in str1:
        keys = dict.keys()
        if n in keys:
            dict[n] += 1
        else:
            dict[n] = 1
    return dict
print(char_frequency('google.com'))

"
rite a python program to replace the first character occurence in the later part of the string,"def change_char(str1):
    char = str1[0]
    length = len(str1)
    str1 = str1.replace(char, '$')
    str1 = char + str1[1:]
    return str1
print(change_char('restart'))

"
Write a Python program to match key values in two dictionaries.,"x = {'key1': 1, 'key2': 3, 'key3': 2}
y = {'key1': 1, 'key2': 2}
for (key, value) in set(x.items()) & set(y.items()):
    print('%s: %s is present in both x and y' % (key, value))

"
Write a Python program that prints all the numbers from 0 to 6 except 3 and 6,"for x in range(6):
    if (x == 3 or x==6):
        continue
print(x,end=' ')
print(""\n"")

"
Write a Python program to get the Fibonacci series between 0 to 50.,"x,y=0,1
while y<50:
    print(y)
    x,y = y,x+y

"
Write a Python program to find numbers between 100 and 400 (both included) where each digit of a number is an even number. The numbers obtained should be printed in a comma-separated sequence,"items = []
for i in range(100, 401):
    s = str(i)
    if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0):
        items.append(s)
print( "","".join(items))

"
Write a Python function to multiply all the numbers in a list,"def multiply(numbers):
    total = 1
    for x in numbers:
        total *= x
    return total
print(multiply((8, 2, 3, -1, 7)))

"
Write a python program to Sum of n positive Integer,"n = int (input (""Enter Value of n: ""))
sum = 0
x = 0
while x != n+1: #because we need to include n in sum
    sum += x
    x+=1
print(""Sum of n positive Integer till {} is {}"".format(n,sum))

"
"Write a python program to Count Numbers, Alphabets, and Special Character","Text = input (""Enter Text: "")
letter, number, spaces , special = 0,0,0,0
for i in Text:
    if i.isalpha():
        letter+=1
    elif i.isspace():
        spaces +=1
    elif i.isnumeric():
        number +=1
    else:
        special+=1
print("" Alphabets = {} \n Numbers = {} \n Space = {} \n Special Chracter = {}"".format(letter,number,spaces,special))

"
Write a python class Shape and Sub class Square:,"class Shape():
    def __init__(self,length = 0):
        self.length = length
    def Area(self):
        print(""Area of Shape is 0"")

class Square (Shape):
    def __init__(self,length = 0):
        self.length = length
    def Area(self):
        self.area = self.length*self.length
print(""Area of a Square is: {}"".format(self.area))
s1 = Square(2)
s1.Area()

"
Write a python program to Accept the String and print the words composed of digits only,"Text = input (""Enter Text: "")
Digits = """"
for i in Text:
    if i.isnumeric():
        Digits +=i+"" ""
print(""Digits used in given strings are: {}"".format(Digits))

"
Write a python program using lambda funtion to square a number,"square2 = lambda num: num * num

"
Write a python program which can compute the factorial of a given number.,"def fact(x):
    if x == 0:
        return 1
    return x * fact(x - 1)

x=int(raw_input())
print (fact(x))

"
"Write a python program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number.The numbers obtained should be printed in a comma-separated sequence on a single line.","values = []
for i in range(1000, 3001):
    s = str(i)
    if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):
        values.append(s)
    print ("","".join(values))

"
Write a python program using a function which can print a dictionary where the keys are numbers between 1 and 3 (both included) and the values are square of keys.,"def printDict():
    d=dict()
    d[1]=1
    d[2]=2**2
    d[3]=3**2
    print (d)
    printDict()

"
Write a python program for a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.,"import math
def bin_search(li, element):
    bottom = 0
    top = len(li)-1
    index = -1
    while top>=bottom and index==-1:
        mid = int(math.floor((top+bottom)/2.0))
    if li[mid]==element:
        index = mid
    elif li[mid]>element:
        top = mid-1
    else:
        bottom = mid+1
    return index

li=[2,5,7,9,11,17,222]
print(bin_search(li,11))
print(bin_search(li,12))

"
Write a python program for implementation of Bubble Sort,"def bubbleSort(arr):
    n = len(arr)
    for i in range(n-1):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1] :
                arr[j], arr[j+1] = arr[j+1], arr[j]
arr = [64, 34, 25, 12, 22, 11, 90]
bubbleSort(arr)

"
Write a python program to check if a number is an Armstrong number.,"n=int(input(""Enter any number: ""))
a=list(map(int,str(n)))
b=list(map(lambda x:x**3,a))
if(sum(b)==n):
    print(""The number is an armstrong number. "")
else:
    print(""The number isn't an arsmtrong number. "")

"
Write a python to find LCM of two numbers,"a=int(input(""Enter the first number:""))
b=int(input(""Enter the second number:""))
if(a>b):
    min1=a
else:
    min1=b
    while(1):
        if(min1%a==0 and min1%b==0):
            print(""LCM is:"",min1)
            break
    min1=min1+1

"
write a python program that adds the elements of a list to a set and prints the set,"my_set = {1, 2, 3}
my_list = [4, 5, 6]
my_set.update(my_list)
print(my_set)

"
write a python program that prints the circumference of a circle,"import math
radius = 10
print(f'Area: {2 * math.pi * radius}')

"
write a python program that prints the area of a rectangle,"length = 10
width = 5
print(f'Area: {length * width}')

"
write a python function that takes a list as an input and converts all numbers to positive numbers and returns the new list,"def make_all_positive(nums):
    return [num if num > 0 else -num for num in nums]

"
write a python program to print the words in a sentence in reverse order,"sentence = 'the quick brown fox'
words = sentence.split(' ')
words.reverse()
print(' '.join(words))

"
write a python function that returns True if the sum of two provided numbers is even,"def is_prod_even(num1, num2):
    sum = num1 + num2
    return not sum % 2

"
write a python program to print the last 3 items in a list,"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(my_list[-3:])

"
write a python program to subtract two numbers and print it,"num1 = 1.5
num2 = 6.3
difference = num1 - num2
print(f'Difference: {difference}')

"
write a python program to print 5 random integers between 10 and 20,"import random
print(random.sample(range(10, 20), 5))

"
write a python program to swap two numbers,"(x, y) = (1, 2)
print(f'Before swapping: x: {x}, y: {y}')
(y, x) = (x, y)
print(f'After swapping: x: {x}, y: {y}')

"
write a python program to print binary right shift on a variable,"a = 60
binary_right_shift = a>>2
print(binary_right_shift)

"
write a python function to check if an item exists in a list and return the boolean value,"def item_exists(lst, item):
    if item in lst:
        return True
    else:
        return False

"
write a python function to get the value of maximum integer allowed on the system,"def get_max_integer():
    import sys
    return sys.maxsize

"
write a python program to print the maximum integer in a list of integers,"lst = [23, 10, 55, 43]
lst.sort()
max = lst[-1]

"
write a python program to print the ascii value of a character,"str1 = 'a'
print(ord(str1))

"
write a python program to print current date and time,"import datetime
print(datetime.datetime.now())

"
write a python program to clone a list,"a = [1, 2, 3]
b = a[:]

"
write python function to detect if a number is even number,"def is_even(num):
    return((num % 2) == 0)

"
write a python program to find the factorial of a number provided by the user.,"num = int(input(""Enter a number: ""))

factorial = 1

if num < 0:
    print(""Sorry, factorial does not exist for negative numbers"")
elif num == 0:
    print(""The factorial of 0 is 1"")
else:
    for i in range(1,num + 1):
        factorial = factorial*i
    print(""The factorial of"",num,""is"",factorial)

"
"write a python program to check if a number is positive, negative or 0","num = float(input(""Enter a number: ""))
if num > 0:
    print(""Positive number"")
elif num == 0:
    print(""Zero"")
else:
    print(""Negative number"")

"
write a python program to check if a number is a prime number,"num = int(input(""Enter a number: ""))

if num > 1:
    for i in range(2,num):
        if (num % i) == 0:
            print(num,""is not a prime number"")
            print(i,""times"",num//i,""is"",num)
            break
    else:
        print(num,""is a prime number"")
else:
    print(num,""is not a prime number"")

"
write a python python program to find the L.C.M. of two input number,"def compute_lcm(x, y):
    if x > y:
        greater = x
    else:
        greater = y

    while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1

    return lcm

num1 = 54
num2 = 24

print(""The L.C.M. is"", compute_lcm(num1, num2))

"
Write a Python program to get the last day of a specified year and month.,"import calendar
year = 2020
month = 12 
print(calendar.monthrange(year, month)[1])

"
Write a Python program to subtract five days from current date,"from datetime import date, timedelta
dt = date.today() - timedelta(5)
print('Current Date :',date.today())
print('5 days before Current Date :',dt)

"
write a Python program to multiply two numbers and print it,"num1 = 1.5
num2 = 6.3
product = num1 * num2
print(f'product: {product}')

"
Write a python program to implement bubble sort and print the result,"from random import randint

N = 7
a = []

for i in range(N):
    a.append(randint(1, 20))
print(a)

for i in range(N-1):
    for j in range(N-i-1):
        if a[j] > a[j+1]:
            b = a[j]
            a[j] = a[j+1]
            a[j+1] = b

print(a)

"
Write a python program to print a given string without spaces,"
s = ""I love India   now I will be printed without any space""
for i in s:
    if i==' ': continue
    print(i,end='')

"
Write a python program to turn every item of a list into its square.,"sample_list = [1, 2, 3, 4, 5, 6, 7]
square_list =  [x * x for x in sample_list]
print(square_list)

"
write a python function to print whether the given year is a leap year or not,"def leapYear(year):
    if (year % 4) == 0:
        if (year % 100) == 0:
            if (year % 400) == 0:
                print(""{0} is a leap year"".format(year))
            else:
                print(""{0} is not a leap year"".format(year))
        else:
            print(""{0} is a leap year"".format(year))
    else:
        print(""{0} is not a leap year"".format(year))

"
write a python function to get the factorial of a given number,"def factorial(n):
    if n == 1:
        return n
    else:
        return n*factorial(n-1)

"
write a python function to compute the lcm of two numbers,"def lcm(x, y):
    if x > y:
        greater = x
    else:
        greater = y
    while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1
    return lcm

    # write a python function to check whether the number is an Armstrong number or not
def Armstrong(num):
    sum = 0
    temp = num
    while temp > 0:
        digit = temp % 10
        sum += digit ** 3
        temp //= 10

    if num == sum:
        print(num,""is an Armstrong number"")
    else:
        print(num,""is not an Armstrong number"")

"
write a python program to remove punctuations in a string,"punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
string = ''.join(e for e in d if e not in punctuations)

"
write a python function to check whether the number is a Magic number or not,"def isMagic(n): 
    sum = 0

    while (n > 0 or sum > 9): 
        if (n == 0): 
            n = sum; 
            sum = 0; 
        sum = sum + n % 10; 
        n = int(n / 10); 

    return True if (sum == 1) else False;

"
write a python list comprehension to transpose a 2D matrix (provided as list),"matrix = [[1,2,3],[4,5,6],[7,8,9]]
matrixT = [[row[i] for row in matrix] for i in range(len(matrix[0]))]

"
write a python function for binary search,"def binary_search(arr, low, high, x): 
    if high >= low: 

        mid = (high + low) // 2
        if arr[mid] == x: 
            return mid 
        elif arr[mid] > x: 
            return binary_search(arr, low, mid - 1, x) 

        else: 
            return binary_search(arr, mid + 1, high, x) 
    else: 
        return -1

"
write a python function to bubblesort an array,"
def bubbleSort(arr): 
    n = len(arr) 
    for i in range(n-1): 
        for j in range(0, n-i-1): 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 

"
write a python function to check whether the number is a lucky number,"
def isLucky(n):

    isLucky.counter = 2
    next_position = n 
    if isLucky.counter > n:
        return 1
    if n % isLucky.counter == 0:
        return 0
    next_position = next_position - next_position /isLucky.counter
    isLucky.counter = isLucky.counter + 1
    return isLucky(next_position)

"
write a python function to convert a number from binary to decimal,"
def binaryToDecimal(n):
    num = n;
    dec_value = 0;
    base = 1;  
    temp = num;
    while(temp):
        last_digit = temp % 10;
        temp = int(temp / 10);

        dec_value += last_digit * base;
        base = base * 2;
    return dec_value;

"
write a python function to convert a list of characters to a string,"def convert(s): 
    str1 = """" 
    return(str1.join(s)) 

"
write a python function to find the sum of digits in a number until one digit (no more than one digit),"def digSum(n): 
    sum = 0
    while(n > 0 or sum > 9): 

        if(n == 0): 
            n = sum
            sum = 0         
        sum += n % 10
        n = int(n/10)    
    return sum

"
write a python function to get the sum of numbers in a given digit,"
def getSum(n):     
    sum = 0
    for digit in str(n):   
        sum += int(digit)        
    return sum

"
write a python program to add two hexadecimal numbers,"
a = ""B""
b = ""C""
sum = hex(int(a, 16) + int(b, 16)) 
print(sum[2:]) 

"
write a python program to add two binary numbers,"
a = ""1101""
b = ""100""
sum = bin(int(a, 2) + int(b, 2))  
print(sum[2:]) 

"
write a python function to calculate nPr,"def nPr(n, r):  
    def fact(n):  
        if (n <= 1): 
            return 1
        return n * fact(n - 1)
    return int(fact(n) /fact(n - r))

"
write a python function to print fibonacci series in the reverse order,"
def reverseFibonacci(n): 

    a = [0] * n  
    a[0] = 0 
    a[1] = 1   
    for i in range(2, n):   
        a[i] = a[i - 2] + a[i - 1]  
    for i in range(n - 1, -1 , -1):    
        print(a[i],end="" "")  

"
write a python function to print Leibniz Harmonic triangle,"
def LeibnizHarmonicTriangle(n): 
    C = [[0 for x in range(n + 1)]  
            for y in range(n + 1)]; 
    for i in range(0, n + 1): 
        for j in range(0, min(i, n) + 1): 
            if (j == 0 or j == i): 
                C[i][j] = 1;  
            else: 
                C[i][j] = (C[i - 1][j - 1] + 
                           C[i - 1][j]);  
    for i in range(1, n + 1): 
        for j in range(1, i + 1): 
            print(""1/"", end = """"); 
            print(i * C[i - 1][j - 1],  
                           end = "" ""); 
        print(); 

"
write a python program to print if year is a leap year or not,"year = 2000
if (year % 4) == 0:
    if (year % 100) == 0:
        if (year % 400) == 0:
            print(""{0} is a leap year"".format(year))
        else:
            print(""{0} is not a leap year"".format(year))
    else:
        print(""{0} is a leap year"".format(year))
else:
    print(""{0} is not a leap year"".format(year))

"
write a python function to remove all punctuation from a string,"def remove_punctuations(sentence):
    punctuations = '''!()-[]{};:'""\,<>./?@#$%^&*_~'''
    no_punct = ''
    for char in sentence:
        if char not in punctuations:
            no_punct = no_punct + char
    return no_punct

"
write a python function that returns the lcm of two numbers,"def lcm(x, y):
    if x > y:
        greater = x
    else:
        greater = y

    while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1

    return lcm

"
write a python function that returns the gcd of two numbers,"def gcd(x, y):
    if x > y:
        smaller = y
    else:
        smaller = x

    for i in range(1, smaller + 1):
        if((x % i == 0) and (y % i == 0)):
            gcd = i

    return gcd

"
write a python function to print the octal value of a decimal number,"def print_octal(dec):
    print(oct(dec))

"
write a python function to print the hexadecimal value of a decimal number,"def print_hexadecimal(dec):
    print(hex(dec))

"
write a python function to return the number of lines in a file,"def count_lines(filename):
    with open(filename, 'r') as f:
        contents = f.read().split('\n')
        return len(contents)

"
write a python program to merge two lists,"odd = [1, 3, 5, 7, 9]
even = [2, 4, 6, 8, 10]
odd.extend(even)

"
write a python program to print the number of letters and digits in sentence,"sentence = 'The Quick 123 Fox'
digits = 0
letters = 0
for c in sentence:
    if c.isdigit():
        digits += 1
    elif c.isalpha():
        letters += 1
    else:
        pass
print(f'Digits: {digits}, Letters: {letters}')

"
write a python class called Person that has a name property,"class Person:
    def __init__(self, name):
        self.name = name

"
write a program to compute the count of each word in a sentence and print it,"word_freq = {}
line = 'how many how words does this many have'
for word in line.split():
    word_freq[word] = word_freq.get(word, 0) + 1
print(word_freq)

"
write a python program that converts a binary number to decimal and prints it,"binary_num = '1010101'
decimal_num = int(binary_num, 2)
print(decimal_num)

"
write a python program that converts a hexadecimal number to hexadecimal and prints it,"hexadecimal_num = 'FF'
decimal_num = int(hexadecimal_num, 16)
print(decimal_num)

"
write a python program that alphabetically sorts the words in a sentence and prints it,"sentence = 'the quick brown fox jumps'
sorted_words = sentence.split(' ')
sorted_words.sort()
print(' '.join(sorted_words))

"
write a python program that prints the area of a circle,"import math
radius = 5
print(f'Area: {math.pi * radius * radius}')

"
write a python program that removes all blank spaces in a sentence and prints it,"sentence = 'the quick brown fox'
print(sentence.replace(' ', ''))

"
write a program to print 5 random numbers divisible by 4 between 100 and 200,"import random
print(random.sample([i for i in range(10, 100) if i%4 == 0], 5))

"
write a program that adds corresponding elements in two lists and prints a new list,"list1 = [1, 2, 3, 4, 5]
list2 = [5, 4, 3, 2, 1]
sum_list = [a+b for (a,b) in zip(list1, list2)]
print(sum_list)

"
write a python program that reverses an integer and prints it,"num = 12345
reversed = int(str(num)[::-1])
print(reversed)

"
write a python program to print unique words in a sentence,"sentence = 'the king is the one'
unique = set(sentence.split(' '))
print(unique)

"
write a python function that returns True if the product of two provided numbers is even,"def is_prod_even(num1, num2):
    prod = num1 * num2
    return not prod % 2

"
write a python program to print the first 5 items in a list,"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(my_list[:5])

"
write a python program to replace each word in a sentence with the length of the word and print it,"sentence = 'the quick brown fox jumps over the lazy dog'
words = sentence.split(' ')
lengths = [str(len(word)) for word in words]
print(' '.join(lengths))

"
add a string to each element of a list python,"my_list = ['foo', 'fob', 'faz', 'funk']
string = 'bar'
list2 = list(map(lambda orig_string: orig_string + string, my_list))

"
print how many keys are in a dictionary python,"a = {'foo':42, 'bar':69}
print(len(a))

"
how to add list numbers in python,"numbers = [1,2,3,4,5,1,4,5] 
Sum = sum(numbers) 

"
capitalize first letter in python in list,"my_list = ['apple pie', 'orange jam']
my_list[0].capitalize()

"
write a python funtion to execute bash commands,"import subprocess
subprocess.call([""sudo"", ""apt"", ""update""])

"
to get a random element from an array in python,"import random
list_ = [1,2,3,4]
random.choice(list_)

"
program to count number of cpu cores available,"import os
os.cpu_count()

"
write a python function to flatten nested lists,"from collections import Iterable
def flatten(lis):
    for item in lis:
        if isinstance(item, Iterable) and not isinstance(item, str):
            for x in flatten(item):
                yield x
        else:
            yield item

"
how to read a specific line from a text file in python,"line = open(""file.txt"", ""r"").readlines()[7]

"
write a function to subtract two matrices in python,"matrix1 = [[0, 1, 2], 
           [3, 5, 5], 
           [6, 7, 8]]

matrix2 = [[1, 2, 3], 
           [4, 5, 6], 
           [7, 8, 9]]

def subtractTheMatrix(matrix1, matrix2):
    matrix1Rows = len(matrix1)
    matrix2Rows = len(matrix2)
    matrix1Col = len(matrix1[0])
    matrix2Col = len(matrix2[0])

    #base case
    if(matrix1Rows != matrix2Rows or matrix1Col != matrix2Col):
        return ""ERROR: dimensions of the two arrays must be the same""

    matrix = []
    rows = []

    for i in range(0, matrix1Rows):
        for j in range(0, matrix2Col):
            rows.append(0)
        matrix.append(rows.copy())
        rows = []

    for i in range(0, matrix1Rows):
        for j in range(0, matrix2Col):
            matrix[i][j] = matrix1[i][j] - matrix2[i][j]

    return matrix

"
write a to time a python script,"from datetime import datetime
start = datetime.now()
print(""hello"")
print(datetime.now() - start)

"
write a python function to find a missing number in a list of consecutive natural numbers,"def getMissingNo(A): 
    n = len(A) 
    total = (n + 1)*(n + 2)/2
    sum_of_A = sum(A) 
    return total - sum_of_A 

"
Write a Python function to check if a given string is an anagram of another given string.,"def is_anagram(str1, str2):
    list_str1 = list(str1)
    list_str1.sort()
    list_str2 = list(str2)
    list_str2.sort()

    return (list_str1 == list_str2)

"
Write a Python function to push all zeros to the end of a list.,"def move_zero(num_list):
    a = [0 for i in range(num_list.count(0))]
    x = [ i for i in num_list if i != 0]
    x.extend(a)
    return(x)

"
Write a Python function to compute s the sum of the digits of the number 2 to the power 20.,"def digits_sum():
    n = 2**20
    ans = sum(int(c) for c in str(n))
    return str(ans)

"
Write a Python function to read a square matrix from console and print the sum of matrix primary diagonal.Accept the size of the square matrix and elements for each column separated with a space (for every row) as input from the user and print the output.,"
size = int(input(""Input the size of the matrix: ""))
matrix = [[0] * size for row in range(0, size)]
for x in range(0, size):

    line = list(map(int, input().split()))

    for y in range(0, size):
        matrix[x][y] = line[y]

matrix_sum_diagonal = sum(matrix[size - i - 1][size - i - 1] for i in range(size))

"
Write a Python class to convert an integer to a roman numeral.,"class Solution:
    def int_to_Roman(self, num):
        val = [
            1000, 900, 500, 400,
            100, 90, 50, 40,
            10, 9, 5, 4,
            1
            ]
        syb = [
            ""M"", ""CM"", ""D"", ""CD"",
            ""C"", ""XC"", ""L"", ""XL"",
            ""X"", ""IX"", ""V"", ""IV"",
            ""I""
            ]
        roman_num = ''
        i = 0
        while  num > 0:
            for _ in range(num // val[i]):
                roman_num += syb[i]
                num -= val[i]
            i += 1
        return roman_num

"
Write a program which can filter() to make a list whose elements are even number between 1 and 20 (both included).,"evenNumbers = filter(lambda x: x%2==0, range(1,21))
print(evenNumbers)

"
Define a class named American which has a static method called printNationality.,"class American(object):
    @staticmethod
    def printNationality():
        print(""America"")
anAmerican = American()
anAmerican.printNationality()
American.printNationality()

"
Define a class named American and its subclass NewYorker.,"class American(object):
    pass

class NewYorker(American):
    pass

"
Define a class named Circle which can be constructed by a radius. The Circle class has a method which can compute the area.,"class Circle(object):
    def __init__(self, r):
        self.radius = r

    def area(self):
        return self.radius**2*3.14

"
"Assuming that we have some email addresses in the ""username@companyname.com"" format, please write program to print the company name of a given email address. Both user names and company names are composed of letters only.","import re
emailAddress = 'bing@google.com'
pat2 = ""(\w+)@(\w+)\.(com)""
r2 = re.match(pat2,emailAddress)
print(r2.group(2))

"
Please generate a random float where the value is between 10 and 100 using Python math module.,"import random
print(random.random()*100)

"
Please generate a random float where the value is between 5 and 95 using Python math module.,"import random
print(random.random()*100-5)

"
"Please write a program to generate all sentences where subject is in [""I"", ""You""] and verb is in [""Play"", ""Love""] and the object is in [""Hockey"",""Football""].","subjects=[""I"", ""You""]
verbs=[""Play"", ""Love""]
objects=[""Hockey"",""Football""]
for i in range(len(subjects)):
    for j in range(len(verbs)):
        for k in range(len(objects)):
            sentence = ""%s %s %s."" % (subjects[i], verbs[j], objects[k])
            print(sentence)

"
"With two given lists [1,3,6,78,35,55] and [12,24,35,24,88,120,155], write a program to make a list whose elements are intersection of the above given lists.","set1=set([1,3,6,78,35,55])
set2=set([12,24,35,24,88,120,155])
set1 &= set2
li=list(set1)
print(li)

"
"Define a class Person and its two child classes: Male and Female. All classes have a method ""getGender"" which can print ""Male"" for Male class and ""Female"" for Female class.","class Person(object):
    def getGender( self ):
        return ""Unknown""

class Male( Person ):
    def getGender( self ):
        return ""Male""

class Female( Person ):
    def getGender( self ):
        return ""Female""

"
"Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5, between 2000 and 3200 (both included).","
l=[]
for i in range(2000, 3201):
    if (i%7==0) and (i%5!=0):
        l.append(str(i))

print(','.join(l))

"
Write a function which can compute the factorial of a given numbers.,"def fact(x):
    if x == 0:
        return 1
    return x * fact(x - 1)

x=int(input())
print(fact(x))

"
"With a given integral number n, write a program to generate a dictionary that contains (i, i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.","n=int(input())
d=dict()
for i in range(1,n+1):
    d[i]=i*i

print(d)

"
Write a program which accepts a sequence of comma-separated numbers from console and generate a list and a tuple which contains every number.,"values=input()
l=values.split("","")
t=tuple(l)
print(l)
print(t)

"
Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.,"s = input()
words = [word for word in s.split("" "")]
print("" "".join(sorted(list(set(words)))))

"
"Write a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.","values = []
for i in range(1000, 3001):
    s = str(i)
    if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):
        values.append(s)
print("","".join(values))

"
Write a program that computes the value of a+aa+aaa+aaaa with a given digit as the value of a.,"a = input()
n1 = int( ""%s"" % a )
n2 = int( ""%s%s"" % (a,a) )
n3 = int( ""%s%s%s"" % (a,a,a) )
n4 = int( ""%s%s%s%s"" % (a,a,a,a) )
print(n1+n2+n3+n4)

"
"Write a function with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.","def putNumbers(n):
    i = 0
    while i<n:
        j=i
        i=i+1
        if j%7==0:
            yield j

for i in reverse(100):
    print(i)

"
Define a function that can accept two strings as input and concatenate them and then print it in console.,"def add(s1,s2):
    print(s1+s2)

"
Define a function which can generate and print a list where the values are square of numbers between 1 and 20 (both included).,"def printList():
    li=list()
    for i in range(1,21):
        li.append(i**2)
    print(li)

"
Define a function which can generate and print a tuple where the value are square of numbers between 1 and 20 (both included).,"def printTuple():
    li=list()
    for i in range(1,21):
        li.append(i**2)
    print(tuple(li))

"
write a python function to check if the user provided string is palindrome or not a palindrome,"
def ifPalindrome(inVar):
    revInvar = []
    for _ in range((len(inVar)-1), -1, -1):
        revInvar.append(inVar[_])
    if revInvar == inVar:
        return ""Palindrome""
    else:
        return ""Not a palindrome""

"
write a python function to check if all elements in a list are unique.,"
def all_unique(lst):
    return len(lst) == len(set(lst))

"
write a python function to convert a user provided string to camelcase,"
from re import sub
def camel(s):
    s = sub(r""(_|-)+"", "" "", s).title().replace("" "", """")
    return ''.join([s[0].lower(), s[1:]])

"
write a python function to capitalize the first letter of a string,"
def capitalize(s, lower_rest = False):
    return ''.join([s[:1].upper(), (s[1:].lower() if lower_rest else s[1:])])

"
write a python program to sort a list of tuples using Lambda.,"
marks = [('Computer Science', 88), ('Physics', 90), ('Maths', 97), ('Chemistry', 82)]
print(""Original list of tuples:"")
print(marks)
marks.sort(key = lambda x: x[1])
print(""\nSorting the List of Tuples:"")
print(marks)

"
write a python function to find the area of a circle using the user provided circumference,"
def area_of_circle(circumference):
    circumference = float(circumference)
    PI = 3.14
    area = (circumference * circumference)/(4 * PI)
    print(f'Area Of a Circle {area}')

"
write a python function to generate 4 digit OTP,"
import math, random 
def generateOTP() : 
    digits = ""0123456789""
    OTP = """" 
    for i in range(4) : 
        OTP += digits[math.floor(random.random() * 10)] 
    return OTP

"
write a python function to check if a user provided number is a perfect square.,"
def is_perfect_square(n):
    x = n // 2
    y = set([x])
    while x * x != n:
        x = (x + (n // x)) // 2
        if x in y: return False
        y.add(x)
    return True

"
write a python function to calculate the least common multiple (LCM) of two user provided positive integers.,"
def lcm(num1, num2):
    if num1 > num2:
        z = num1
    else:
        z = num2
    while(True):
        if((z % num1 == 0) and (z % num2 == 0)):
            lcm = z
            break
        z += 1
    return lcm

"
write a python program to split the string into chunks of size 3,"
str = 'CarBadBoxNumKeyValRayCppSan'
n = 3
chunks = [str[i:i+n] for i in range(0, len(str), n)]
print(chunks)

"
write a python program to get numbers divisible by fifteen from a list,"
num_list = [45, 55, 60, 37, 100, 105, 220]
result = list(filter(lambda x: (x % 15 == 0), num_list))
print(f""Numbers divisible by 15 are {result}"")

"
write a python function to append text to a user provided file,"
def file_read(fname):
    with open(fname, ""w"") as myfile:
        myfile.write(""Appending line one\n"")
        myfile.write(""Appending line two"")
        txt = open(fname)
        print(txt.read())

"
write a python function that sorts a list based on the user provided list of indexes.,"
def sort_by_indexes(lst, indexes, reverse=False):
    return [val for (_, val) in sorted(zip(indexes, lst), key=lambda x: \
            x[0], reverse=reverse)]

"
write a python function to capitalize first letter of a string,"
def capitalize(s, lower_rest = False):
    return ''.join([s[:1].upper(), (s[1:].lower() if lower_rest else s[1:])])

"
write a python function that chunks a list into smaller lists of a specified size,"
from math import ceil
def chunk(lst, size):
    return list(
        map(lambda x: lst[x * size:x * size + size],
        list(range(ceil(len(lst) / size)))))

"
write a python function to calculate a sigmoid value for any user provided real numbers,"def sigmoid(x):
    return 1 / (1 + math.exp(-x))

"
write a python function that returns first element of a list,"
def head(lst):
    return lst[0]

"
write a python function to check if two lists contains same elements regardless of order,"
def have_same_contents(a, b):
    for v in set(a + b):
        if a.count(v) != b.count(v):
            return False
    return True

"
write a python function to transpose a user provided two dimensional list,"
def transpose(lst):
    return list(zip(*lst))

"
write a python function to convert a user provided date to iso representation,"
from datetime import datetime
def to_iso_date(d):
    return d.isoformat()

"
"Consider an array of non-negative integers. A second array is formed by shuffling the elements of the first array and deleting a random element. Given these two arrays, find which element is missing in the second array.","first_array = [1,2,3,4,5,6,7]
second_array = [3,7,2,1,4,6]

def finder(first_array, second_array):
    return(sum(first_array) - sum(second_array))

missing_number = finder(first_array, second_array)

print(missing_number)

"
Given a list slice it into a 3 equal chunks and revert each list,"sampleList = [11, 45, 8, 23, 14, 12, 78, 45, 89]

length = len(sampleList)
chunkSize  = int(length/3)
start = 0
end = chunkSize
for i in range(1, 4, 1):
    indexes = slice(start, end, 1)
    listChunk = sampleList[indexes]
    mylist = [i for i in listChunk]
    print(""After reversing it "", mylist)
    start = end
    if(i != 2):
        end +=chunkSize
    else:
        end += length - chunkSize

"
Sort the string list alphabetically,"
thislist = [""orange"", ""mango"", ""kiwi"", ""pineapple"", ""banana""]
thislist.sort()
print(f""Sorted List:{thislist}"")

"
Count the number of spaces in a sring,"s = ""Count, the number of spaces""
lenx = s.count(' ')
print(f""number of spaces in sring: {lenx}"")

"
Split Strings,"word = ""Hello World""
ksplit = word.split(' ') 
print(f""Splited Strings: {ksplit}"")

"
test if string contains digits,"word = ""Hello World""
check = word.isdigit()
print(f""String contains digits?:{check}"")

"
Counting total Upper Case in a string,"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0,len(str1)):
    char = str1[i]
    if(char.upper()):
        digitCount += 1
print('Number total Upper Case: ',digitCount)

"
Counting total lower Case in a string,"str1 = ""abc4234AFdeaa""
digitCount = 0
for i in range(0,len(str1)):
    char = str1[i]
    if(char.lower()):
        digitCount += 1
print('Number total lower Case: ',digitCount)

"
"Write a program which will create a new string by appending s2 in the middle of s1 given two strings, s1 and s2","def appendMiddle(s1, s2):
    middleIndex = int(len(s1) /2)
    middleThree = s1[:middleIndex:]+ s2 +s1[middleIndex:]
    print(""After appending new string in middle"", middleThree)

appendMiddle(""Ault"", ""Kelly"")

"
"Given an input string, count occurrences of all characters within a string","str1 = ""Apple""
countDict = dict()
for char in str1:
    count = str1.count(char)
    countDict[char]=count
print(countDict)

"
Remove special symbols/Punctuation from a given string,"import string

str1 = ""/*Jon is @developer & musician""
new_str = str1.translate(str.maketrans('', '', string.punctuation))
print(""New string is "", new_str)

"
Given a two list of equal size create a set such that it shows the element from both lists in the pair,"firstList = [2, 3, 4, 5, 6, 7, 8]
secondList = [4, 9, 16, 25, 36, 49, 64]
result = zip(firstList, secondList)
resultSet = set(result)
print(resultSet)

"
generating a reliable secure random number,"import secrets
print(""Random integer number generated using secrets module is "")
number = secrets.randbelow(30)
print(number)

"
Merge two dictionaries in a single expression,"currentEmployee = {1: 'Scott', 2: ""Eric"", 3:""Kelly""}
formerEmployee  = {2: 'Eric', 4: ""Emma""}
allEmployee = {**currentEmployee, **formerEmployee}
print(allEmployee)

"
Alternate cases in String,"test_str = ""geeksforgeeks""
res = """" 
for idx in range(len(test_str)): 
    if not idx % 2 : 
        res = res + test_str[idx].upper() 
    else: 
        res = res + test_str[idx].lower() 
print(res)

"
1 write a python function to add to add two numbers,"
def return_exponential(num1, num2):
    return num1 ** num2

"
2 write a python function to split a string at space,"
def string_split_at_space(string):
    return string.split()

"
3 write a python program to convert a string to a char array,"
def char_array(string):
    return list(string)

"
4 write a python function to print the factorial of a number,"
def factorial(x):
    prod = 1
    for i in range(1, x + 1):
        prod *= i

    return prod

"
7 write a python function to return every second number from a list,"
def every_other_number(lst):
    return lst[::2]

"
13  write a function to calculate the mean of an array,"
def calc_mean(arr):
    sum = 0
    for i in range(len(arr)):
        sum += arr[i]
    return sum / len(arr)

"
15 write a function to implement a binary tree,"
class BinTree:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key

"
25 write a funtion to print all the files in the current directory,"
import os

def list_files():
    return os.listdir()

"
31 write a function that checks if a number is an Armstrong number (sum of digits of the number = the number),"
from itertools import chain

def check_armstrong(n):
    sum_of_digits = sum(map(lambda x: int(x) ** 3, chain(str(n))))
    if sum_of_digits == n:
        return True
    else:
        return False

"
35 Write a python function that sorts a list of strings by their length in the descending order,"def sort_by_len(arr):
    return sorted(arr, reverse=True, key=lambda x: len(x))

"
37 Write a python program to calculate the LCM and HCF of two given numbers,"def hcf(x1, x2):
    if x1 == 0:
        return x2
    else:
        return hcf(x2 % x1, x1)

def lcm_hcf(x1, x2):
    h_c_f = hcf(x1, x2)
    lcm = x1 * x2 / h_c_f
    return lcm, h_c_f

l, h = lcm_hcf(18, 12)

print(f""LCM : {l}, HCF: {h}"")
"
43 Define a function which returns the current working directory,"import os

def get_cwd():
    return os.getcwd()

"
46 Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print all values except the first 5 elements in the list.,"import requests

def get_encoding(url):
    data = requests.get(url)
    return data.encoding

"
48 write a python function that checks if a given key is present in the environment,"import os

def get_env_path(key):
    return os.getenv(key)

"
49 Write a generator that returns True / False randomly,"
import random

def generate_tf():
    rand = random.random()
    if rand > 0.5:
        yield True
    else:
        yield False

"
52 Write a python program to calculate the slope of a line given two points,"
def slope_of_a_line(x1, x2, y1, y2):
    del_x = x2 - x1
    del_y = y2 - y1
    return float(del_y) / del_x

print(slope_of_a_line(0, 10, 0, 10))

"
55 Write a python program that pads a given python list to a given length at the start and prints the modified list,"
def pad_arr_start(arr, pad_len):
    pad_arr = [0] * (pad_len - len(arr))
    pad_arr.extend(arr)
    return pad_arr

tmp = [1, 2, 3, 4, 5]
x = pad_arr_start(tmp, 10)
print(x)

"
"63 Write a python function which returns true if all the numbers in a list negative, else return False","
def are_all_negative(arr):
    filt_arr = list(filter(lambda x: x < 0, arr))
    if len(filt_arr) == len(arr):
        return True
    else:
        return False

"
68 write a program to randomly generate a list with 5 even numbers between 100 and 200 inclusive.,"import random

print(random.sample([i for i in range(100, 201) if i % 2 == 0], 5))

"
"72 write a program to print the running time of execution of ""1+1"" for 100 times.","from timeit import Timer

t = Timer(""for i in range(100):1+1"")
print(t.timeit())

"
"73 write a program to shuffle and print the list [3,6,7,8].","from random import shuffle

li = [3, 6, 7, 8]
shuffle(li)
print(li)

"
"77 By using list comprehension, write a program to print the list after removing delete numbers which are divisible by 5 and 7 in [12,24,35,70,88,120,155].","li = [12, 24, 35, 70, 88, 120, 155]
li = [x for x in li if x % 5 != 0 and x % 7 != 0]
print(li)

"
89 Write a program to solve a classic ancient Chinese puzzle:  We count 35 heads and 94 legs among the chickens and rabbits in a farm. How many rabbits and how many chickens do we have?,"def solve(numheads, numlegs):
    ns = ""No solutions!""
    for i in range(numheads + 1):
        j = numheads - i
        if 2 * i + 4 * j == numlegs:
            return i, j
    return ns, ns

"
96 write a python function that takes a number and returns an array of the number duplicated n times,"
def duplicate_array(num, n):
    num = [num] * n
    return num

"
98 write a python function that calculates the midpoint between two numbers,"
def midpoint(a, b):
    lar = b if b > a else a
    sm = a if b > a else b

    return float(lar + sm) / 2

"
write a program to convert tuple to list,"t = (1,2,4,5,6)
print(f'list:{list(t)}')

"
write a program to convert list to tuple,"l = ['a',4,5]
print(f'tuple:{tuple(l)}')

"
write a functiom to concat two list,"l1 = [1,2,3]
l2 = [4,5,6]
def list_concat(l1,l2):
    return l1 + l2 

"
write  Function to left rotate n by d bits,"def leftRotate(n, d): 
    INT_BITS = 32
    return (n << d)|(n >> (INT_BITS - d)) 

n = 16
d = 2

print(""Left Rotation of"",n,""by"",d,""is"",end="" "") 
print(leftRotate(n, d)) 

"
Program to cyclically rotate an array by one,"
def cyclicRotate(input): 
    print ([input[-1]] + input[0:-1]) 

"
"write Python program to demonstrate ternary operator using tuples, Dictionary and lambda","a, b = 10, 20
print( (b, a) [a < b] ) 
print({True: a, False: b} [a < b]) 
print((lambda: b, lambda: a)[a < b]()) 

"
write a program for Adding a sublist,"
a = [[2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20]] 
a.append([5, 10, 15, 20, 25]) 
print(a) 

"
write a program for Reversing a sublist,"a = [[2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20]] 
a[2].reverse() 
print(a) 

"
write a program that uses delete function on  Dictionary,"Dict = { 5 : 'Welcome', 6 : 'To', 7 : 'Geeks', 
        'A' : {1 : 'Geeks', 2 : 'For', 3 : 'Geeks'}, 
        'B' : {1 : 'Geeks', 2 : 'Life'}} 
print(""Initial Dictionary: "") 
print(Dict) 

del Dict[6] 
print(""\nDeleting a specific key: "") 
print(Dict) 

del Dict['A'][2] 
print(""\nDeleting a key from Nested Dictionary: "") 
print(Dict) 

"
write a  Python3 code to demonstrate working of Convert Dictionaries List to Order Key Nested dictionaries Using loop + enumerate(),"
test_list = [{""Gfg"" : 3, 4 : 9}, {""is"": 8, ""Good"" : 2}, {""Best"": 10, ""CS"" : 1}] 

print(""The original list : "" + str(test_list)) 

res = dict() 
for idx, val in enumerate(test_list): 
    res[idx] = val 

print(""The constructed dictionary : "" + str(res)) 

"
write Python3 code to demonstrate working of Convert Dictionaries List to Order Key Nested dictionaries Using dictionary comprehension + enumerate(),"
test_list = [{""Gfg"" : 3, 4 : 9}, {""is"": 8, ""Good"" : 2}, {""Best"": 10, ""CS"" : 1}] 

print(""The original list : "" + str(test_list)) 

res = {idx : val for idx, val in enumerate(test_list)} 
print(""The constructed dictionary : "" + str(res)) 

"
write Python3 code to demonstrate working of Segregating key's value in list of dictionaries Using generator expression,"
test_list = [{'gfg' : 1, 'best' : 2}, {'gfg' : 4, 'best': 5}] 

print(""The original list : "" + str(test_list)) 

res = [tuple(sub[""gfg""] for sub in test_list), 
    tuple(sub[""best""] for sub in test_list)] 

print(""Segregated values of keys are : "" + str(res)) 

"
write a Python code demonstrate the working of sorted() with lambda,"
lis = [{ ""name"" : ""Nandini"", ""age"" : 20}, 
{ ""name"" : ""Manjeet"", ""age"" : 20 },
    { ""name"" : ""Nikhil"" , ""age"" : 19 }]

print (""The list printed sorting by age: "")
print (sorted(lis, key = lambda i: i['age']))
print (""\r"")

"
write a Python3 code to demonstrate working of Extract dictionaries with values sum greater than K,"
test_list = [{""Gfg"" : 4, ""is"" : 8, ""best"" : 9}, 
            {""Gfg"" : 5, ""is"": 8, ""best"" : 1}, 
            {""Gfg"" : 3, ""is"": 7, ""best"" : 6}, 
            {""Gfg"" : 3, ""is"": 7, ""best"" : 5}] 

print(""The original list : "" + str(test_list)) 

K = 15

res = [] 
for sub in test_list: 
    sum = 0
    for key in sub: 
        sum += sub[key] 
    if sum > K: 
        res.append(sub) 

print(""Dictionaries with summation greater than K : "" + str(res)) 

"
write Python program to illustrate  enumerate function in loops,"l1 = [""eat"",""sleep"",""repeat""] 

for count,ele in enumerate(l1,100): 
    print (count,ele )

"
write Python3 code to demonstrate convert list of strings to list of tuples Using map() + split() + tuple(),"
test_list = ['4, 1', '3, 2', '5, 3'] 

print(""The original list : "" + str(test_list)) 

res = [tuple(map(int, sub.split(', '))) for sub in test_list] 

print(""The list after conversion to tuple list : "" + str(res)) 

"
write Python code to demonstrate to remove the tuples if certain criteria met,"
ini_tuple = [('b', 100), ('c', 200), ('c', 45), 
                        ('d', 876), ('e', 75)] 

print(""intial_list"", str(ini_tuple))
result = [i for i in ini_tuple if i[1] <= 100] 
print (""Resultant tuple list: "", str(result)) 

"
write Python code to demonstrate to remove the tuples if certain criteria met,"ini_tuple = [('b', 100), ('c', 200), ('c', 45), 
                        ('d', 876), ('e', 75)] 
print(""intial_list"", str(ini_tuple)) 
result = list(filter(lambda x: x[1] <= 100, ini_tuple)) 
print (""Resultant tuple list: "", str(result)) 

"
rite a fucntion to convert Fahrenheit to Celsius,"def Fahrenheit_to_Celsius(f):
    celsius = (f - 32) / 1.8
    return celsius

"
"With a given integral number n, write a program to generate a dictionary that contains (i, i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.","n=int(raw_input())
d=dict()
for i in range(1,n+1):
    d[i]=i*i
print(d)

"
"Write a program which takes 2 digits, X,Y as input and generates a 2-dimensional array. The element value in the i-th row and j-th column of the array should be i*j.","input_str = raw_input()
dimensions=[int(x) for x in input_str.split(',')]
rowNum=dimensions[0]
colNum=dimensions[1]
multilist = [[0 for col in range(colNum)] for row in range(rowNum)]
for row in range(rowNum):
    for col in range(colNum):
        multilist[row][col]= row*col
print(multilist)

"
Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.,"items=[x for x in raw_input().split(',')]
items.sort()
print(','.join(items))

"
Write a program that accepts sequence of lines as input and prints the lines after making all characters in the sentence capitalized.,"lines = []
while True:
    s = raw_input()
    if s:
        lines.append(s.upper())
    else:
        break;
for sentence in lines:
    print(sentence)

"
Write a program that accepts a sentence and calculate the number of upper case letters and lower case letters.,"s = raw_input()
d={""UPPER CASE"":0, ""LOWER CASE"":0}
for c in s:
    if c.isupper():
        d[""UPPER CASE""]+=1
    elif c.islower():
        d[""LOWER CASE""]+=1
    else:
        pass
print (""UPPER CASE"", d[""UPPER CASE""])
print (""LOWER CASE"", d[""LOWER CASE""])

"
Define a function that can convert a integer into a string and print it in console.,"def printValue(n):
    print (str(n))

"
Define a function that can accept two strings as input and concatenate them and then print it in console.,"def printValue(s1,s2):
    print (s1+s2)

"
Define a function which can print a dictionary where the keys are numbers between 1 and 3 (both included) and the values are square of keys.,"def printDict():
    d=dict()
    d[1]=1
    d[2]=2**2
    d[3]=3**2
    print(d)

"
"Write a program to generate and print another tuple whose values are even numbers in the given tuple (1,2,3,4,5,6,7,8,9,10).","tp=(1,2,3,4,5,6,7,8,9,10)
li=list()
for i in tp:
    if tp[i]%2==0:
        li.append(tp[i])
tp2=tuple(li)
print(tp2)

"
Write a program which can filter() to make a list whose elements are even number between 1 and 20 (both included).,"evenNumbers = filter(lambda x: x%2==0, range(1,21))
print (evenNumbers)

"
Define a class named Shape and its subclass Square. The Square class has an init function which takes a length as argument. Both classes have a area function which can print the area of the shape where Shape's area is 0 by default.,"class Shape(object):
    def __init__(self):
        pass
    def area(self):
        return 0
class Square(Shape):
    def __init__(self, l):
        Shape.__init__(self)
        self.length = l
    def area(self):
        return self.length*self.length
aSquare= Square(3)
print (aSquare.area())

"
raise a RuntimeError exception.,"raise RuntimeError('something wrong')

"
"Assuming that we have some email addresses in the ""username@companyname.com"" format, write program to print the user name of a given email address. Both user names and company names are composed of letters only.","import re
emailAddress = raw_input()
pat2 = ""(\w+)@((\w+\.)+(com))""
r2 = re.match(pat2,emailAddress)
print (r2.group(1))

"
write a program using generator to print the numbers which can be divisible by 5 and 7 between 0 and n in comma separated form while n is input by console.,"def NumGenerator(n):
    for i in range(n+1):
        if i%5==0 and i%7==0:
            yield i
n=int(raw_input())
values = []
for i in NumGenerator(n):
    values.append(str(i))
print ("","".join(values))

"
write a program to output a random even number between 0 and 10 inclusive using random module and list comprehension.,"import random
print (random.choice([i for i in range(11) if i%2==0]))

"
write a program which count and print the numbers of each character in a string input by console.,"dic = {}
s=raw_input()
for s in s:
    dic[s] = dic.get(s,0)+1
print ('\n'.join(['%s,%s' % (k, v) for k, v in dic.items()]))

"
write a program to multiply two matrix,"
rowsA = len(A)
colsA = len(A[0])
rowsB = len(B)
colsB = len(B[0])
if colsA != rowsB:
    raise ArithmeticError('Number of A columns must equal number of B rows.')
C = []
while len(C) < rowsA:
    C.append([])
    while len(C[-1]) < colsB:
        C[-1].append(0.0)
for i in range(rowsA):
    for j in range(colsB):
        total = 0
        for ii in range(colsA):
            total += A[i][ii] * B[ii][j]
        C[i][j] = total
print(""Multiplied Array"")
for i in range(rowsA):
    row = '|'
    for b in range(colsA):
        row = row + ' ' + str(C[i][b])
    print(row + ' ' + '|')

"
"write a program to join all items in a tuple into a string, using a hash character as separator","myTuple = (""John"", ""Peter"", ""Vicky"")
x = ""#"".join(myTuple)
print(x)

"
write a program to remove spaces at the beginning and at the end of the string,"txt = ""     banana     ""
x = txt.strip()
print(""of all fruits"", x, ""is my favorite"")

"
write a program to split a string into a list where each line is a list item,"txt = ""Thank you for the music\nWelcome to the jungle""
x = txt.splitlines()
print(x)

"
write a program to find index of a word in given string,"txt = ""Hello, welcome to my world.""
x = txt.index(""welcome"")
print(x)

"
write a program to find factorinal of a number,"import math
number = 8
fa = math.factorial(number)
print('Factorial', fa)

"
Write a program to print bit wise OR of two numbers,"a = 60
b = 13
c = a | b
print(""OR"", c)

"
